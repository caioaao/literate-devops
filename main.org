#+TITLE: Notebook setup
#+PROPERTY: header-args:shell :results output silent
#+PROPERTY: header-args:sh :results output silent
#+PROPERTY: header-args:elisp :results output silent
#+PROPERTY: header-args:emacs-lisp :results output silent

#+NAME: gpg-key-id
: DD90B67479EFA704

* Table Of Contents                                                :TOC:TOC2:
- [[#prelude][Prelude]]
  - [[#pop-os][Pop-OS]]
  - [[#lenovo-laptop][Lenovo laptop]]
  - [[#macbook][Macbook]]
  - [[#emacs][Emacs]]
  - [[#locale][Locale]]
  - [[#zsh][Zsh]]
  - [[#homebrew][Homebrew]]
  - [[#aspell][Aspell]]
  - [[#git][Git]]
  - [[#ag][+Ag+]]
  - [[#ripgrep][Ripgrep]]
  - [[#system76][System76]]
- [[#desktop-environment][Desktop Environment]]
  - [[#kde-plasma][KDE Plasma]]
  - [[#web-browser][+Web browser+]]
  - [[#enlightenment][+Enlightenment+]]
- [[#security][Security]]
  - [[#yubikey][Yubikey]]
  - [[#gnupg--ssh][GnuPG / SSH]]
  - [[#iptables-firewall][iptables firewall]]
  - [[#nordvpn][NordVPN]]
- [[#development][Development]]
  - [[#tmux][tmux]]
  - [[#zoxide][zoxide]]
  - [[#terminal-emulator][Terminal Emulator]]
  - [[#direnv][direnv]]
  - [[#asdf][asdf]]
  - [[#git-1][Git]]
  - [[#git-lfs][Git-LFS]]
  - [[#docker][Docker]]
  - [[#nodejs][NodeJS]]
  - [[#typescript][Typescript]]
  - [[#kubernetes][Kubernetes]]
  - [[#golang][golang]]
  - [[#protobuf][protobuf]]
  - [[#gcloud][gcloud]]
  - [[#pulumi][pulumi]]
  - [[#ngrok][ngrok]]
  - [[#nats-cli][nats-cli]]
  - [[#pre-commit][pre-commit]]
  - [[#python][python]]
  - [[#cookiecutter][cookiecutter]]
  - [[#ocaml][OCaml]]
  - [[#hugo][Hugo]]
  - [[#clojure][Clojure]]
  - [[#scala][Scala]]
  - [[#nix][Nix]]
  - [[#bazel][Bazel]]
  - [[#gis-tools][GIS tools]]
  - [[#erlang--elixir][Erlang / Elixir]]
  - [[#rust][Rust]]
  - [[#plantuml][Plantuml]]
  - [[#flyio][fly.io]]
  - [[#zig][Zig]]
- [[#cosmetics][Cosmetics]]
  - [[#make-fonts-great-again][Make fonts great again]]
  - [[#gnome-top-bar][Gnome top bar]]
  - [[#wallpaper][Wallpaper]]
- [[#cadcam][CAD/CAM]]
  - [[#candle-grbl][Candle (grbl)]]
  - [[#freecad][FreeCAD]]
- [[#other][Other]]
  - [[#spotify][Spotify]]
  - [[#command-for-gif-recording][Command for gif recording]]
  - [[#obs-studio][obs-studio]]
  - [[#bluetooth][Bluetooth]]
- [[#playbooks][Playbooks]]
  - [[#fix-emacs-signature-issues][Fix emacs signature issues]]
  - [[#enabledisable-a-single-webcam][Enable/Disable a single webcam]]

* Prelude

Requirements: emacs (obviously), git

Add permission to run shell script blocks:

#+BEGIN_SRC elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)))
#+END_SRC

And disable the babel-evaluate thingy that's super annoying:

#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

** Pop-OS

Unfortunatelly, one of the +many+ annoyances of Pop! OS is the out of date
packages. The buggy version of org-mode that comes with the default Emacs
prevents us from using this file properly, so you'll have to update it before
using. To do so, first run the update script:

#+BEGIN_SRC emacs-lisp
(require 'ob-sh)
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)))
#+END_SRC

#+BEGIN_SRC sh :dir /sudo::
add-apt-repository ppa:kelleyk/emacs
apt-get update
apt install -y emacs26
apt purge -y emacs25
apt autoremove -y
#+END_SRC

** Lenovo laptop

Lenovo has the good ol' pc speaker that makes those terrible beeps, so let's disable it for good by removing the loading of pcspkr module:

#+begin_src shell :dir /sudo::
/sbin/rmmod pcspkr; echo "blacklist pcspkr" >>/etc/modprobe.d/blacklist.conf
#+end_src

** Macbook

** Emacs

*** Gnome

We need to disable the active-menu shortcut (clashes with ~M-SPC~).

#+begin_src sh
gsettings set org.gnome.desktop.wm.keybindings activate-window-menu []
#+end_src

*** Install from source

#+name: emacs-version
: 29.1

To use the latest version, we need to download emacs and install it from the GNU mirror

First let's install the dependencies:

#+begin_src shell :dir /sudo::
dnf builddep -y emacs
dnf install -y libtree-sitter-devel wxBase-devel wxGTK3-devel libwebp-devel
#+end_src

#+begin_src shell :dir /tmp :var version=emacs-version
curl -fsSL http://gnu.c3sl.ufpr.br/ftp/emacs/emacs-${version}.tar.xz | tar -xJ
cd /tmp/emacs-${version}
PKG_CONFIG_PATH=:/usr/lib64/pkgconfig:/usr/share/pkgconfig
make distclean
make uninstall
./autogen.sh
./configure \
  --without-pop \
  --with-mailutils \
  --with-pgtk \
  --without-x \
  --with-xwidgets \
  --with-cairo \
  --without-compress-install \
  --with-native-compilation \
  --with-json \
  --with-dbus \
  --with-gif \
  --with-jpeg \
  --with-png \
  --with-rsvg \
  --with-tiff \
  --with-webp \
  --with-gpm \
  --with-modules \
  --with-harfbuzz \
  build_alias=x86_64-redhat-linux-gnu \
  host_alias=x86_64-redhat-linux-gnu
make -j12
#+end_src

#+begin_src shell :dir /sudo:: :var version=emacs-version
cd /tmp/emacs-${version}
make install
#+end_src

** Locale

Set system language:

#+BEGIN_SRC shell :dir /sudo:: :results output silent
localectl set-locale LANG=en_US.UTF-8
#+END_SRC

Keyboard config:

#+BEGIN_SRC shell :dir /sudo:: :results output silent
setxkbmap -option ctrl:swapcaps
localectl set-x11-keymap us pc104 altgr-intl ctrl:swapcaps
#+END_SRC

** Zsh

*** Installing

First, install zsh and its dependencies and change the login shell.

**** Arch-linux

#+BEGIN_SRC shell :dir /sudo::
pacman --noconfirm -Sy zsh
#+END_SRC

**** Pop-OS

#+BEGIN_SRC shell :dir /sudo::
apt install -y zsh || true
#+END_SRC

*** Set user shell

#+BEGIN_SRC shell :dir /sudo:: :var user=(user-login-name)
chsh -s /bin/zsh $user
#+END_SRC

*** Install oh-my-zsh

I used to use zsh-users/antigen but it was another abstraction layer
on top of the plugin management that didn't bring much benefit to
me. It tries to solve the monorepo issue with oh-my-zsh, but that's
not an issue for me.

#+begin_src shell
sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
#+end_src

Let's also install syntax highlighting:

#+begin_src shell
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
#+end_src

*** Configuring

Let's start with creating the folder to hold our config. This will
make it easier than keeping everything under the standard ~.zshrc~.

In this structure, we'll have two main directories. The first one is
loaded *before* oh-my-zsh is initialized and holds the scripts that
will setup this initialization process. The other configures the shell
for other apps.

#+begin_src shell
mkdir -p ~/.config/zsh.d
mkdir -p ~/.config/zsh.d/init-omz.d
mkdir -p ~/.config/zsh.d/apps.d
#+end_src

Now let's set up the theme:

#+begin_src shell :tangle ~/.config/zsh.d/init-omz.d/10-theme.sh
ZSH_THEME="gallois"
plugins+=(zsh-syntax-highlighting)
#+end_src

And some basic plugins:

#+begin_src shell :tangle ~/.config/zsh.d/init-omz.d/10-git.sh
plugins+=git
#+end_src

#+begin_src shell :tangle ~/.config/zsh.d/init-omz.d/10-utils.sh
plugins+=common-aliases
#+end_src

#+begin_src shell :tangle ~/.config/zsh.d/init-omz.d/10-emacs.sh
plugins+=emacs
#+end_src

Now let's tangle the zshrc, which will be responsible for setting up
oh-my-zsh and importing the configs in the folders above:

#+begin_src shell :tangle ~/.zshrc
REPS_PATH=~/reps

export ZSH="$HOME/.oh-my-zsh"
export PATH=$PATH:~/.local/bin

export MY_ZSH_CONFIG=~/.config/zsh.d

plugins=()

for f in `ls $MY_ZSH_CONFIG/init-omz.d | sort`; do
       source $MY_ZSH_CONFIG/init-omz.d/$f
done

source "$ZSH/oh-my-zsh.sh"

for f in `ls $MY_ZSH_CONFIG/apps.d | sort`; do
       source $MY_ZSH_CONFIG/apps.d/$f
done
#+end_src

Now let's already create some app specific configs here. First, emacs:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-emacs.sh
#!/usr/bin/env bash

bindkey -A emacs main # set emacs as default

# Configs for zsh to work nicelly inside emacs
if [ -n "$INSIDE_EMACS" ]; then
    export TERM=vt100
    chpwd() { print -P "\033AnSiTc %d" }
    print -P "\033AnSiTu %n"
    print -P "\033AnSiTc %d"
fi
#+end_src

** Homebrew                                                           :macos:

#+begin_src shell :dir /tmp
curl -fsSL https://github.com/Homebrew/brew/releases/download/4.1.17/Homebrew-4.1.17.pkg -o homebrew.pkg
open homebrew.pkg
#+end_src

Now the config. This is thust the output of ~brew shellenv~, but we hard-code it here otherwise it might not be called by homebrew

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/00-brew.sh
export HOMEBREW_NO_ANALYTICS=1
eval `/opt/homebrew/bin/brew shellenv`
#+end_src

** Aspell

*** Arch linux

#+BEGIN_SRC shell :dir /sudo:: :results output silent
pacman --noconfirm -Sy aspell aspell-en
#+END_SRC

*** Ubuntu/Pop-OS

#+BEGIN_SRC shell :dir /sudo::
apt install -y aspell aspell-en
#+END_SRC

*** Fedora

#+begin_src shell :dir /sudo::
dnf install -y aspell aspell-en
#+end_src

** Git

Add github to known SSH hosts list so we're not prompted to confirm it as it might break some org block.

#+begin_src shell
mkdir -p ~/.ssh
touch ~/.ssh/known_hosts
ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
#+end_src

** +Ag+                                                          :DEPRECATED:

Deprecated - use ripgrep instead since it's faster!

*** Arch Linux

#+begin_src shell :dir /sudo::
pamac install --no-confirm the_silver_searcher
#+end_src

*** Pop OS

#+begin_src shell :dir /sudo::
apt-get install silversearcher-ag
#+end_src

** Ripgrep

*** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm ripgrep
#+end_src

*** Fedora

#+begin_src shell :dir /sudo::
dnf install -y ripgrep
#+end_src

*** OSX

#+begin_src shell
brew install ripgrep
#+end_src

** System76

Follow [[https://support.system76.com/articles/system76-software][this article first]], and then [[https://support.system76.com/articles/system76-driver/#arch][the driver article]]. The first article install dependencies needed by the driver.

*** Arch linux

More important information [[https://wiki.archlinux.org/title/System76_Oryx_Pro][here]].

Install dependencies:

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm --needed base-devel git linux515-headers rust
#+end_src

Import a PGP key that is needed for system76-io-dkms package:

#+begin_src shell
gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys E988B49EE78A7FB1
gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 87F211AF2BE4C2FE
#+end_src

Now run the following in a terminal. The order here is important.

#+begin_src shell
pamac build system76-firmware
pamac build system76-firmware-daemon
pamac build firmware-manager
pamac build system76-dkms
pamac build system76-acpi-dkms
pamac build system76-power
pamac build system76-driver
pamac build sys76-kb
#+end_src

Finally, enable all services that need to be enabled:

#+begin_src shell :dir /sudo::
systemctl enable --now system76
systemctl enable --now system76-firmware-daemon
systemctl enable --now system76-power
#+end_src

* Desktop Environment

** KDE Plasma

(Credits to [[https://github.com/shalva97/kde-configuration-files][this repo]] for most of the stuff here)

First of all, let's backup the original keybinds file:

#+begin_src shell
cp $HOME/.config/kglobalshortcutsrc "$HOME/.config/kglobalshortcutsrc.`date -u +'%Y-%m-%dT%H:%M:%S'`"
#+end_src

Then remove all existing binds:

#+begin_src shell
sed -i -r 's/=.+,.+,/=none,none,/g' $HOME/.config/kglobalshortcutsrc
#+end_src

Now let's disable touch screen edges:

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-Cube --key BorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-Cube --key BorderActivateCylinder "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-Cube --key BorderActivateSphere "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-Cube --key TouchBorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-Cube --key TouchBorderActivateCylinder "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-Cube --key TouchBorderActivateSphere "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-DesktopGrid --key BorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-DesktopGrid --key TouchBorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-PresentWindows --key BorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-PresentWindows --key BorderActivateAll "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-PresentWindows --key BorderActivateClass "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-PresentWindows --key TouchBorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-PresentWindows --key TouchBorderActivateAll "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group Effect-PresentWindows --key TouchBorderActivateClass "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group TabBox --key BorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group TabBox --key BorderAlternativeActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group TabBox --key TouchBorderActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group TabBox --key TouchBorderAlternativeActivate "9"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key Bottom "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key BottomLeft "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key BottomRight "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key Left "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key Right "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key Top "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key TopLeft "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group ElectricBorders --key TopRight "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group TouchEdges --key Bottom "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group TouchEdges --key Left "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group TouchEdges --key Right "None"
kwriteconfig5 --file $HOME/.config/kwinrc --group TouchEdges --key Top "None"
#+end_src

Navigation / window manipulation binds:

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window Close' 'Meta+q,none,Close Window'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window Maximize' 'Meta+m,none,Maximize Window'

kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window Quick Tile Left' 'Meta+Ctrl+Left,Meta+Ctrl+Left,Quick Tile Window to the Left'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window Quick Tile Right' 'Meta+Ctrl+Right,Meta+Ctrl+Right,Quick Tile Window to the Right'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window Quick Tile Top' 'Meta+Ctrl+Up,Meta+Ctrl+Up,Quick Tile Window to the Top'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window Quick Tile Bottom' 'Meta+Ctrl+Down,Meta+Ctrl+Down,Quick Tile Window to the Bottom'

kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Walk Through Windows' 'Meta+Tab,Meta+Tab,Walk Through Windows'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Walk Through Windows (Reverse)' 'Meta+Shift+Backtab,Meta+Shift+Backtab,Walk Through Windows (Reverse)'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Walk Through Windows of Current Application' 'Meta+`,none,Walk through Windows of Current Application'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Walk Through Windows of Current Application (Reverse)' 'Meta+Shift+`,none,Walk through Windows of Current Application (Reverse)'

kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window to Next Screen' 'Meta+Shift+Right,none,Window to Next Screen'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kwin --key 'Window to Previous Screen' 'Meta+Shift+Left,none,Window to Previous Screen'
#+end_src

Locking screen:

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group ksmserver --key 'Lock Session' "Meta+l	Meta+Esc	Screensaver,Meta+l	Meta+Esc	Screensaver,Lock Session"
#+end_src

Volume control:

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kmix --key 'decrease_volume' 'Volume Down,Volume Down,Decrease Volume'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kmix --key 'increase_microphone_volume' 'Microphone Volume Up,Microphone Volume Up,Increase Microphone Volume'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kmix --key 'increase_volume' 'Volume Up,Volume Up,Increase Volume'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kmix --key 'mic_mute' 'Microphone Mute	Meta+Volume Mute,Microphone Mute	Meta+Volume Mute,Mute Microphone'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group kmix --key 'mute' 'Volume Mute,Volume Mute,Mute'
#+end_src

Media control:

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group mediacontrol --key 'nextmedia' 'Media Next,Media Next,Media playback next'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group mediacontrol --key 'playpausemedia' 'Media Play,Media Play,Play/Pause media playback'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group mediacontrol --key 'previousmedia' 'Media Previous,Media Previous,Media playback previous'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group mediacontrol --key 'stopmedia' 'Media Stop,Media Stop,Stop media playback'
#+end_src

Now application specific binds. Notice the group name is the same as the file under ~/usr/share/applications~.

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org.kde.krunner.desktop' --key '_launch' 'Meta+Space	Search,Meta+Space	Search,KRunner'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'emacs.desktop' --key '_launch' 'Meta+e,Meta+e,Launch Emacs'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'Alacritty.desktop' --key '_launch' 'Meta+t,Meta+t,Launch Terminal'
#+end_src

Screenshots using Spectacle:

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org.kde.spectacle.desktop' --key 'ActiveWindowScreenShot' 'Meta+Print,Meta+Print,Capture Active Window'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org.kde.spectacle.desktop' --key 'CurrentMonitorScreenShot' 'Ctrl+Print,Ctrl+Print,Capture Current Monitor'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org.kde.spectacle.desktop' --key 'FullScreenScreenShot' 'Print,Print,Capture Entire Desktop'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org.kde.spectacle.desktop' --key 'OpenWithoutScreenshot' 'none,none,Launch Spectacle without capturing'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org.kde.spectacle.desktop' --key 'RectangularRegionScreenShot' 'Shift+Print,Shift+Print,Capture Rectangular Region'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org.kde.spectacle.desktop' --key 'WindowUnderCursorScreenShot' 'none,none,Capture Window Under Cursor'
#+end_src

And some other hardware controls:

#+begin_src shell
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'Decrease Keyboard Brightness' 'Keyboard Brightness Down,Keyboard Brightness Down,Decrease Keyboard Brightness'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'Decrease Screen Brightness' 'Monitor Brightness Down,Monitor Brightness Down,Decrease Screen Brightness'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'Hibernate' 'Hibernate,Hibernate,Hibernate'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'Increase Keyboard Brightness' 'Keyboard Brightness Up,Keyboard Brightness Up,Increase Keyboard Brightness'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'Increase Screen Brightness' 'Monitor Brightness Up,Monitor Brightness Up,Increase Screen Brightness'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'PowerDown' 'Power Down,Power Down,Power Down'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'PowerOff' 'Power Off,Power Off,Power Off'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'Sleep' 'Sleep,Sleep,Suspend'
kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group 'org_kde_powerdevil' --key 'Toggle Keyboard Backlight' 'Keyboard Light On/Off,Keyboard Light On/Off,Toggle Keyboard Backlight'
#+end_src

Now restart ~kglobalaccel~ so changes take effect:

#+begin_src shell
systemctl --user restart plasma-kglobalaccel.service
#+end_src

** +Web browser+                                                 :DEPRECATED:

I want to experiment with Vivaldi.

#+begin_src shell :dir /sudo::
pamac install --no-confirm vivaldi
#+end_src

** +Enlightenment+                                               :DEPRECATED:

First install enlightenment and Entrance:

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm enlightenment
pacman -Sy --noconfirm --asdeps meson
#+end_src

Now build Entrance running ~pamac build entrance-git~.

Finally, enable entrance:

#+begin_src shell :dir /sudo::
systemctl enable entrance.service --force
#+end_src

* Security

** Yubikey

*** Installing manager and dependencies

**** Arch Linux

#+BEGIN_SRC shell :dir /sudo::
pacman --noconfirm -Sy yubikey-manager libfido2 pcsclite ccid
#+END_SRC

**** Fedora

#+begin_src shell :dir /sudo::
dnf install -y yubikey-manager libfido2 pcsc-lite ccid
#+end_src

**** Pop OS

#+BEGIN_SRC shell :dir /sudo::
apt-add-repository ppa:yubico/stable
apt update
apt install -y yubikey-manager u2f-host libu2f-host-dev scdaemon
#+END_SRC

**** OSX

#+begin_src shell :dir /tmp
curl -fsSL https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-latest-mac.pkg -o ykman.pkg
open ykman.pkg
#+end_src

#+begin_src shell
brew install gnupg
#+end_src

*** Configuring                                                       :linux:

Start and enable the appropriate service

#+BEGIN_SRC shell :dir /sudo::
systemctl enable pcscd.service
systemctl start pcscd.service
#+END_SRC

To create keys, see https://github.com/caioaao/YubiKey-Guide

We also need to import the keys for use. For that, run =gpg --keyserver hkps://keyserver.ubuntu.com --card-edit= and
then =fetch= and exit.

*** Fix firefox prompt issue

Firefox keeps asking for some `PKCS#11 token PIV_II' password at random times. A solution is to disable the OpenSC module in Firefox.

#+begin_src shell
mkdir -p ~/.config/pkcs11/modules
cp /usr/share/p11-kit/modules/opensc.module ~/.config/pkcs11/modules/
echo 'disable-in: firefox' >> ~/.config/pkcs11/modules/opensc.module
#+end_src

** GnuPG / SSH

*** Installing dependencies

**** Arch linux

Install ~gcr~, as ~pinentry-gnome3~ needs it and it doesn't come
installed together with it, for some reason.

#+BEGIN_SRC shell :dir /sudo::
pacman --noconfirm -Sy gcr
#+END_SRC

**** Fedora

#+begin_src shell :dir /sudo::
dnf install -y gcr
#+end_src

**** OSX

#+begin_src shell
brew tap jorgelbg/tap
brew install pinentry-mac pinentry-touchid
#+end_src

*** Configure

Tangle the gpg-agent config.

#+BEGIN_SRC conf :tangle ~/.gnupg/gpg-agent.conf :mkdirp yes
enable-ssh-support
log-file ~/.gnupg/gpg-agent.log
allow-emacs-pinentry
allow-loopback-pinentry
pinentry-program /usr/bin/pinentry-gnome3
default-cache-ttl 60
max-cache-ttl 120
#+END_SRC

If on Mac, this is the config instead:

#+BEGIN_SRC conf :tangle ~/.gnupg/gpg-agent.conf :mkdirp yes
enable-ssh-support
log-file ~/.gnupg/gpg-agent.log
allow-emacs-pinentry
allow-loopback-pinentry
pinentry-program $HOMEBREW_PREFIX/bin/pinentry-touchid
default-cache-ttl 60
max-cache-ttl 120
#+END_SRC

And the GPG config:

#+BEGIN_SRC conf :tangle ~/.gnupg/gpg.conf
# https://github.com/drduh/config/blob/master/gpg.conf
# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html
# https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html
# Use AES256, 192, or 128 as cipher
personal-cipher-preferences AES256 AES192 AES
# Use SHA512, 384, or 256 as digest
personal-digest-preferences SHA512 SHA384 SHA256
# Use ZLIB, BZIP2, ZIP, or no compression
personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed
# Default preferences for new keys
default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed
# SHA512 as digest to sign keys
cert-digest-algo SHA512
# SHA512 as digest for symmetric ops
s2k-digest-algo SHA512
# AES256 as cipher for symmetric ops
s2k-cipher-algo AES256
# UTF-8 support for compatibility
charset utf-8
# Show Unix timestamps
fixed-list-mode
# No comments in signature
no-comments
# No version in signature
no-emit-version
# Long hexidecimal key format
keyid-format 0xlong
# Display UID validity
list-options show-uid-validity
verify-options show-uid-validity
# Display all keys and their fingerprints
with-fingerprint
# Display key origins and updates
#with-key-origin
# Cross-certify subkeys are present and valid
require-cross-certification
# Disable putting recipient key IDs into messages
throw-keyids
# Enable smartcard
use-agent
# "SKS is dying" https://code.firstlook.media/the-death-of-sks-pgp-keyservers-and-how-first-look-media-is-handling-it
keyserver hkps://keys.openpgp.org
#+END_SRC

Make sure gnupg home has correct permissions:

#+begin_src shell
chmod 700 ~/.gnupg
#+end_src

And the init scripts:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/00-gpg-agent.sh
export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye >/dev/null

unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
fi
#+end_src

Also, tangle the ssh config.

#+BEGIN_SRC conf :tangle ~/.ssh/config :mkdirp yes
GSSAPIAuthentication no
#+END_SRC

PS: explanation for disabling GSSApi, besides the slowness it causes in some
cases, is presented [[https://unix.stackexchange.com/questions/65068/why-ssh-takes-a-long-time-to-connect#comment875799_65276][here]].

And fix the slowness caused by [[https://wiki.archlinux.org/index.php/Systemd-resolved][systemd-resolved]] by tangling the following
config file to use Google's DNS:

#+BEGIN_SRC conf :tangle /sudo::/etc/systemd/resolved.conf.d/dns.conf :mkdirp yes
[Resolve]
DNS=1.1.1.1
#+END_SRC

Added security with DNS over TLS. *WARNING:* do not use with ubuntu since
systemd-resolved's is old and doesn't support it.

#+BEGIN_SRC conf :tangle /sudo::/etc/systemd/resolved.conf.d/tls.conf :mkdirp yes
[Resolve]
DNSOverTLS=opportunistic
#+END_SRC

And restart the service

#+BEGIN_SRC shell :dir /sudo::
systemctl restart systemd-resolved.service
#+END_SRC

Also import the public key so we can use it:

#+BEGIN_SRC shell :var keyid=gpg-key-id
gpg --keyserver hkps://keyserver.ubuntu.com --recv ${keyid}
#+END_SRC

We also need to trust the key. For that run ~gpg --edit-key ${gpg-key-id}~,
then type ~trust~ and choose option ~5~.

We also need to tell GnuPG to use PC/SC instead of CCID. Without this
we need to restart the ~pcscd.service~ every time we plug the
yubikey. As always, [[https://wiki.archlinux.org/title/GnuPG#GnuPG_with_pcscd_(PCSC_Lite)][Arch Linux's Wiki]] is a great resource to
understand and fix the issue.

#+begin_src conf :tangle ~/.gnupg/scdaemon.conf :tangle-mode (identity #o700)
pcsc-driver /usr/lib64/libpcsclite.so.1
card-timeout 5
disable-ccid
#+end_src

Lastly, let's add the key to sshcontrol:

#+begin_src shell :tangle ~/.gnupg/sshcontrol
31B796AD58754173E9C2A6BCEC8D89EA79591638
#+end_src

At this point we can also switch the repositories (emacs.d and literate-devops) to use the ssh remotes.

** iptables firewall

After some issues because of exposed ports, using iptables as a firewall
sounds like a good idea.

First create the systemd service and the flush script:

#+begin_src conf :tangle /sudo::/etc/systemd/system/iptables.service
# credits: https://github.com/gronke/systemd-iptables/commit/cae73534807575f7716ee4f03a1721b9d4075d31
[Unit]
Description=Packet Filtering Framework
DefaultDependencies=no
After=systemd-sysctl.service
Before=sysinit.target
[Service]
Type=oneshot
ExecStart=/usr/sbin/iptables-restore /etc/iptables/iptables.rules
ExecReload=/usr/sbin/iptables-restore /etc/iptables/iptables.rules
ExecStop=/etc/iptables/iptables-flush.sh
RemainAfterExit=yes
[Install]
WantedBy=multi-user.target
#+end_src

#+begin_src shell :tangle /sudo::/etc/iptables/iptables-flush.sh :mkdirp yes :tangle-mode (identity #o755) :dir /sudo::
#!/usr/bin/env bash
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
#+end_src

Then generate the file containing the rules and enable the service:

#+begin_src shell :dir /sudo::
# Flush all rules
/etc/iptables/iptables-flush.sh

# Default rule to drop incoming traffic
iptables --policy INPUT DROP
iptables --policy FORWARD DROP
iptables --policy OUTPUT ACCEPT

# Rules to allow outgoing traffic
iptables --append INPUT -i lo -j ACCEPT
iptables --append INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT
iptables --append INPUT --jump REJECT

iptables --append FORWARD --match state --state ESTABLISHED,RELATED -j ACCEPT
iptables --append FORWARD -o enp+ -j ACCEPT
iptables --append FORWARD -o wlp+ -j ACCEPT
iptables --append FORWARD --jump REJECT

# Rules to allow outgoing traffic from docker containers
iptables -N DOCKER-USER
iptables --append DOCKER-USER -i enp+ --match state --state ESTABLISHED,RELATED -j ACCEPT
iptables --append DOCKER-USER -i wlp+ --match state --state ESTABLISHED,RELATED -j ACCEPT
iptables --append DOCKER-USER -i enp+ -j DROP
iptables --append DOCKER-USER -i wlp+ -j DROP

mkdir -p /etc/iptables || true
iptables-save > /etc/iptables/iptables.rules

systemctl enable iptables.service
systemctl start iptables.service
#+end_src

** NordVPN

*** Install

**** Arch Linux

Install by running ~pamac build nordvpn-bin~. After installing, add your user to the nordvpn group:

**** Fedora

#+begin_src shell :dir /sudo::
curl -sSf https://downloads.nordcdn.com/apps/linux/install.sh > /tmp/install-nord.sh
chmod +x /tmp/install-nord.sh
/tmp/install-nord.sh -n
#+end_src

*** Configure

#+BEGIN_SRC shell :dir /sudo:: :var user=(user-login-name)
usermod -aG nordvpn $user
#+END_SRC

And start/enable the nordvpn daemon:

#+begin_src shell :dir /sudo::
systemctl enable nordvpnd
systemctl start nordvpnd
#+end_src

* Development

** tmux

*** Installing

**** Arch-linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm tmux xclip fzf
#+end_src

**** Pop-OS

#+begin_src shell :dir /sudo::
apt install -y tmux
#+end_src

**** Fedora

#+begin_src shell :dir /sudo::
dnf install -y tmux xclip fzf
#+end_src

**** OSX

#+begin_src shell
brew install tmux
#+end_src

*** Configuring

Let's first install tmux plugin manager:

#+begin_src shell
mkdir -p ~/.tmux/plugins
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
#+end_src

And tangle the config:

#+begin_src conf :tangle ~/.config/tmux/tmux.conf :mkdirp yes
# change prefix to C-q
unbind-key C-b
set -g prefix 'C-q'
bind-key 'C-q' send-prefix

# source config
bind r source-file ~/.config/tmux/tmux.conf

# increase history
set -g history-limit 4096

# use vi mode
set-window-option -g mode-keys vi
set -g status-keys vi

# copy nvim split window binds
bind s split-window -h
bind v split-window -v
unbind '"'
unbind %

# move between panes with vim movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
unbind o

# trying to make copying better
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line
bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
set -g mouse on

# open urls using `prefix u`
set -g @plugin 'wfxr/tmux-fzf-url'

# theming
set -g @plugin 'wfxr/tmux-power'
set -g @plugin 'wfxr/tmux-net-speed'
set -g @tmux_power_theme 'snow'
set -g @tmux_power_show_download_speed true

run '~/.tmux/plugins/tpm/tpm'
#+end_src

We also need to download some fonts for the glyphs:

#+begin_src shell :dir ~/.fonts :mkdirp yes
curl -fsSL https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.0/Meslo.zip | busybox unzip -
fc-cache -fv
#+end_src

To install the plugins, run ~C-q I~ from inside tmux. It will look like it's
frozen, but it's installing stuff.

** zoxide

[[https://github.com/ajeetdsouza/zoxide][zoxide]] is a tool for jumping to folders using ~z~

Install using the bash script:

#+begin_src shell
curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
#+end_src

And tangle the setup script

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/20-zoxide.sh :mkdirp yes
eval "$(zoxide init zsh)"
#+end_src

** Terminal Emulator

*** foot

Only in Wayland

**** Fedora

#+begin_src shell :dir /sudo::
yum install -y foot
#+end_src

*** Alacritty (prev)

**** Install

***** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm alacritty
#+end_src

***** Pop OS

#+begin_src shell :dir /sudo::
apt install -y alacritty
#+end_src

***** Fedora

#+begin_src shell :dir /sudo::
dnf -y install alacritty
#+end_src

**** Configure

#+begin_src yaml :tangle ~/.config/alacritty/alacritty.yml :mkdirp yes
  font:
    # Point size of the font, but alacritty has many issues with font
    # size apparently, so we need to choose this through trial and error
    size: 11.0

    colors:
      primary:
        background: '#333333'

        window:
          decorations: none
          padding:
            x: 5
            y: 10
#+end_src

** direnv

*** Install

**** Arch-Linux

#+begin_src sh :dir /sudo::
pacman -Sy --no-confirm direnv
#+end_src

**** Pop-OS

#+begin_src sh :dir /sudo::
apt install -y direnv
#+end_src

**** Fedora

#+begin_src shell :dir /sudo::
dnf install -y direnv
#+end_src

**** OSX

#+begin_src shell
brew install direnv
#+end_src

*** Configure

#+begin_src sh :tangle ~/.config/zsh.d/apps.d/10-direnv.sh :mkdirp yes
#!/usr/bin/env bash

eval "$(direnv hook zsh)"
#+end_src

** asdf

# TODO install asdf system-wide: https://github.com/asdf-vm/asdf/issues/577

First clone the repo:

#+begin_src sh
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.8
#+end_src

Now add the completions and the executable to dot files:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-asdf.sh :mkdirp yes
. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash
#+end_src

** Git

Basic configs

TODO: try grabbing the email from system

#+BEGIN_SRC conf :tangle ~/.gitconfig
[user]
name="Caio Oliveira"
email=caioaao@gmail.com
signingKey=DD90B67479EFA704

[core]
editor=emacs

[commit]
# gpgsign=true

[init]
defaultBranch=main
#+END_SRC

** Git-LFS

*** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm git-lfs
#+end_src

*** Pop OS

#+begin_src shell :dir /sudo::/tmp
curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
apt install -y git-lfs
#+end_src

*** Fedora

#+begin_src shell :dir /sudo::
dnf install -y git-lfs
#+end_src

** Docker
*** Install

**** Arch Linux

Install:

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm docker
#+end_src

Now enable and start service:

#+begin_src shell :dir /sudo::
systemctl enable docker
systemctl start docker
#+end_src

**** Ubuntu

Install the dependencies

#+BEGIN_SRC shell :dir /sudo::
apt update -y

apt install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
#+END_SRC

And add the GPG key and PPA repository:

#+begin_src shell :dir /sudo::
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
#+end_src

Finally install:

#+begin_src shell :dir /sudo::
apt update -y
apt install -y docker-ce docker-ce-cli containerd.io
#+end_src

And create the docker bridge if it doesn't already exist:

#+BEGIN_SRC shell :dir /sudo::
ip link add name docker0 type bridge
ip addr add dev docker0 172.17.0.1/16
#+END_SRC

**** Fedora

Configure the repository and install it:

#+begin_src shell :dir /sudo::
dnf -y install dnf-plugins-core
dnf config-manager \
    --add-repo \
    https://download.docker.com/linux/fedora/docker-ce.repo
dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
#+end_src

Start docker service:

#+begin_src shell :dir /sudo::
systemctl start docker
#+end_src

*** Configure

Add current user to docker group:

#+begin_src shell :dir /sudo:: :var user=(user-login-name)
usermod -a -G docker $user
#+end_src

After that we need to re-login in order for it to take effect or use ~sudo su $USER~ to start a session with the groups.

** NodeJS

#+NAME: node-nvm-version
: v0.39.1

Installing NVM

#+begin_src shell :var version=node-nvm-version
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${version}/install.sh | bash
#+end_src

Now tangle this to add it to zsh:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-nvm.sh :mkdirp yes
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# script to autoload nvm when there's an .nvmrc file in a directory
autoload -U add-zsh-hook
load-nvmrc() {
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc
#+end_src

Let's add LTS as the default node version using nvmrc:

#+begin_src conf :tangle ~/.nvmrc
lts/*
#+end_src

And add some  [[https://github.com/nvm-sh/nvm/tree/edacf8275e3bef4a80971625ed89df13a9af427c#default-global-packages-from-file-while-installing][default global packages]]:

#+begin_src conf :tangle ~/.nvm/default-packages :mkdirp t
yarn
#+end_src

We can now install nodejs

#+begin_src shell
\. "$HOME/.nvm/nvm.sh" --no-use
nvm install
nvm alias default node
#+end_src

** Typescript

#+begin_src shell
\. "$HOME/.nvm/nvm.sh"
nvm use node
npm install -g typescript typescript-language-server
#+end_src

** Kubernetes

*** kubectl

#+NAME: default_kubectl_version
: 1.26.0

Add the plugin to asdf and install the default version:

#+begin_src shell :var kubectl_version=default_kubectl_version
asdf plugin-add kubectl
asdf install kubectl ${kubectl_version}
#+end_src

Now setup kubectl global version:

#+begin_src shell :var kubectl_version=default_kubectl_version
asdf global kubectl ${kubectl_version}
#+end_src

Now install the OMZ kubectl plugin:

#+begin_src shell :tangle ~/.config/zsh.d/init-omz.d/10-kubectl.sh
plugins+=kubectl
#+end_src

** golang

*** Install

**** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm go
#+end_src

**** Other

#+NAME: go_version
: 1.21.1

#+begin_src shell :dir /tmp :var GO_VERSION=go_version
curl -sL https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz | tar xvz
#+end_src

#+begin_src shell :dir /sudo:: :var GO_VERSION=go_version
mv /tmp/go /opt/go-${GO_VERSION}
rm -rf /opt/go || true
ln -sf /opt/go-${GO_VERSION} /opt/go
#+end_src

*** Configure

And add go executables to our path:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-golang.sh
#!/usr/bin/env bash

export GOPATH=~/go
export PATH="$PATH:/opt/go/bin:$GOPATH/bin"
#+end_src

Now the goodies:

#+begin_src shell
source ~/.config/zsh.d/apps.d/10-golang.sh
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install github.com/rogpeppe/godef@latest
go install golang.org/x/tools/gopls@latest
#+end_src

** protobuf

*** Compiler
**** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm protobuf
#+end_src

**** Fedora

#+begin_src shell :dir /sudo::
dnf install -y protobuf protobuf-compiler
#+end_src

**** Other

Download, extract and configure:

#+begin_src shell :dir /tmp
curl -sL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.2/protobuf-cpp-3.11.2.tar.gz | tar xz
cd protobuf-3.11.2
./configure
make
make check -j 13
#+end_src

Install and refresh shared library cache

#+begin_src shell :dir /sudo::/tmp/protobuf-3.11.2
make install
ldconfig
#+end_src

*** Buf

[[https://buf.build][Buf]] is an awesome tool for building, linting and testing protobuf.

#+NAME: buf-version
: 1.16.0

#+begin_src shell :dir /sudo:: :var version=buf-version
curl -fsSL https://github.com/bufbuild/buf/releases/download/v${version}/buf-Linux-x86_64 > /usr/local/bin/buf
chmod +x /usr/local/bin/buf
#+end_src

** gcloud

*** Fedora

#+begin_src shell :dir /sudo::
tee -a /etc/yum.repos.d/google-cloud-sdk.repo << EOM
[google-cloud-cli]
name=Google Cloud CLI
baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el8-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=0
gpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOM

dnf install google-cloud-cli
#+end_src

#+begin_src shell
gcloud init
#+end_src

*** Other

#+NAME: gcloud_sdk_version
: 401.0.0

First we need python 3.9 since as of the time of this writing gcloud [[https://issuetracker.google.com/issues/205238176][does not support python 3.10]]

#+begin_src shell
asdf plugin-add python
asdf install python 3.9.9
#+end_src

#+begin_src shell :dir /tmp :var version=gcloud_sdk_version
curl -fsSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${version}-linux-x86_64.tar.gz | tar -xz
#+end_src

#+begin_src shell :dir /sudo:: :var version=gcloud_sdk_version
mv /tmp/google-cloud-sdk /opt/google-cloud-sdk-${version}
rm -rf /opt/google-cloud-sdk || true
ln -sf /opt/google-cloud-sdk-${version} /opt/google-cloud-sdk
#+end_src

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-gcloud.sh
export CLOUDSDK_PYTHON="${HOME}/.asdf/installs/python/3.9.9/bin/python"
if [ -f '/opt/google-cloud-sdk/path.zsh.inc' ]; then . '/opt/google-cloud-sdk/path.zsh.inc'; fi
if [ -f '/opt/google-cloud-sdk/completion.zsh.inc' ]; then . '/opt/google-cloud-sdk/completion.zsh.inc'; fi
#+end_src

#+begin_src shell
export CLOUDSDK_PYTHON="${HOME}/.asdf/installs/python/3.9.9/bin/python"
. '/opt/google-cloud-sdk/path.zsh.inc'
gcloud config set disable_usage_reporting true
#+end_src

** pulumi

First tangle this so the install script doesn't try to add to our main ~zshrc~ file.

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-pulumi.sh :mkdirp yes
export PATH=$PATH:$HOME/.pulumi/bin
#+end_src

#+begin_src shell
export PATH=$PATH:$HOME/.pulumi/bin
curl -fsSL https://get.pulumi.com | sh
#+end_src

Now let's generate the pulumi autocomplete:

#+begin_src shell
$HOME/.pulumi/bin/pulumi gen-completion zsh > $HOME/.config/zsh.d/apps.d/10-pulumi-autocomplete.sh
#+end_src

** ngrok

#+begin_src sh :dir ~/.local/bin
curl -fsSL https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-s390x.tgz | tar xvzf -
chmod +x ngrok
#+end_src

** nats-cli

#+NAME: nats-cli-version
: 0.0.24

#+begin_src shell :dir /tmp :var version=nats-cli-version
wget https://github.com/nats-io/natscli/releases/download/${version}/nats-${version}-linux-amd64.zip
unzip nats-${version}-linux-amd64.zip
#+end_src

#+begin_src shell :dir /sudo:: :var version=nats-cli-version
mkdir /opt/nats-cli
chmod 0755 /opt/nats-cli
mv /tmp/nats-${version}-linux-amd64 /opt/nats-cli/nats-${version}
ln -sf /opt/nats-cli/nats-${version}/nats /usr/local/bin/nats
#+end_src

** pre-commit

*** Arch linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm python-pre-commit
#+end_src

*** Fedora

#+begin_src shell :dir /sudo::
dnf install -y pre-commit
#+end_src

** python

Install with asdf:

#+begin_src shell
asdf plugin-add python
asdf install python 3.9.9
#+end_src

Then add the version to tools config.

#+begin_src shell
asdf global python 3.9.9
#+end_src

** cookiecutter

*** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm python-cookiecutter
#+end_src

** OCaml

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm ocaml opam
#+end_src

Now init opam:

#+begin_src shell
touch ~/.config/zsh.d/apps.d/10-opam.sh
opam init -a --dot-profile ~/.config/zsh.d/apps.d/10-opam.sh \
     --enable-shell-hook --enable-completion --shell=zsh --reinit
eval $(opam env)
#+end_src

Install LSP server:

#+begin_src shell
opam pin add -y ocaml-lsp-server https://github.com/ocaml/ocaml-lsp.git
opam install ocaml-lsp-server
#+end_src

Also install ReasonML LSP server:

#+NAME: reason_ls_version
: 1.7.9

#+begin_src shell :dir /tmp :var version=reason_ls_version
curl -fsSL https://github.com/jaredly/reason-language-server/releases/download/${version}/rls-linux.zip | busybox unzip -
#+end_src

#+begin_src shell :dir /sudo:: :var version=reason_ls_version
mv /tmp/rls-linux /opt/reason-ls-${version}
chmod +x /opt/reason-ls-${version}/reason-language-server
ln -sf /opt/reason-ls-${version}/reason-language-server /usr/local/bin/reason-language-server
#+end_src

** Hugo

#+NAME: hugo-version
: 0.97.3

#+begin_src shell :dir /tmp :var version=hugo-version
curl -fsSL https://github.com/gohugoio/hugo/releases/download/v${version}/hugo_extended_${version}_Linux-64bit.tar.gz | tar xvzf -
#+end_src

#+begin_src shell :dir /sudo:: :var version=hugo-version
mkdir -p /opt/hugo-$version
mv /tmp/hugo /opt/hugo-$version
ln -sf /opt/hugo-$version/hugo /usr/local/bin/hugo
#+end_src

** Clojure

*** Dependencies

#+begin_src shell :dir /sudo::
dnf install -y rlwrap
#+end_src

*** Install

#+name: clojure-version
: 1.11.1.1273

#+begin_src shell :dir /tmp :var version=clojure-version
curl -O https://download.clojure.org/install/linux-install-${version}.sh
chmod +x linux-install-${version}.sh
#+end_src

#+begin_src shell :dir /sudo::/tmp :var version=clojure-version
./linux-install-${version}.sh
#+end_src

*** Install LSP

#+name: clojure-lsp-version
: 2023.05.04-19.38.01

Let's install [[https://github.com/clojure-lsp/clojure-lsp][clojure-lsp]]

#+begin_src shell :dir /tmp :var version=clojure-lsp-version
curl -fsSL https://github.com/clojure-lsp/clojure-lsp/releases/download/${version}/clojure-lsp-native-linux-amd64.zip | busybox unzip -
#+end_src

#+begin_src shell :dir /sudo::
mv /tmp/clojure-lsp /usr/bin/clojure-lsp
chmod +x /usr/bin/clojure-lsp
#+end_src

*** Configure

#+begin_src clojure :tangle ~/.clojure/deps.edn :mkdirp yes
{:mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}}

 :aliases {:new {:extra-deps {com.github.seancorfield/clj-new
                              {:mvn/version "1.2.362"}}
                 :exec-fn clj-new/create
                 :exec-args {:template "app"}}}}
#+end_src

** Scala

#+NAME: scala-cs-launcher-version
: 21616f77e3b47e65647acf946950275116f1c917

#+begin_src shell :dir /tmp :var version=scala-cs-launcher-version
curl -fL https://github.com/coursier/launchers/raw/${version}/cs-x86_64-pc-linux.gz | gzip -d > cs && chmod +x cs && ./cs setup --jvm 11 --apps metals metals-emacs -y
#+end_src

** Nix

*** Install

**** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy nix
#+end_src

*** Configure

Start and enable daemon:

#+begin_src shell :dir /sudo
systemctl start nix-daemon.service
systemctl enable nix-daemon.service
#+end_src

Add current user to nix group to be able to access daemon socket:

#+begin_src shell :dir /sudo:: :var user=(user-login-name)
usermod -aG nix-users $user
#+end_src

Finally, add nix-profile to our path:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/05-nix.sh
PATH=$PATH:~/.nix-profile/bin
#+end_src

And add our global nix configuration:

#+begin_src conf :tangle /sudo::/etc/nix/nix.conf
#
# https://nixos.org/manual/nix/stable/#sec-conf-file
#

# Unix group containing the Nix build user accounts
build-users-group = nixbld

# By default, nix only uses one builder. The following will allow nix
# to use as many jobs as the number of CPUs:
max-jobs = auto
#+end_src

** Bazel

[[https://github.com/bazelbuild/bazelisk][Bazelisk]] is used to manage bazel versions. It's said to be the nvm of bazel.

#+begin_src shell :dir /tmp :var version=bazelisk-version
curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/${version}/bazelisk-linux-amd64 > bazelisk-${version}
#+end_src

#+begin_src shell :dir /sudo:: :var version=bazelisk-version
mv /tmp/bazelisk-${version} /usr/local/bin
chmod +x /usr/local/bin/bazelisk-${version}
rm -rf /usr/local/bin/bazelisk
ln -sf /usr/local/bin/bazelisk-${version} /usr/local/bin/bazelisk
#+end_src

** GIS tools

*** osmium

Download source and dependencies:

#+begin_src shell :dir /tmp
curl -fsSL https://github.com/osmcode/libosmium/archive/refs/tags/v2.18.0.tar.gz > /tmp/libosmium.tar.gz
curl -fsSL https://github.com/mapbox/protozero/archive/refs/tags/v1.7.1.tar.gz > /tmp/protozero.tar.gz
curl -fsSL https://github.com/osmcode/osmium-tool/archive/refs/tags/v1.14.0.tar.gz > /tmp/osmium-tool.tar.gz
#+end_src

#+begin_src shell :dir /sudo::
cd /opt

tar -xzf /tmp/libosmium.tar.gz
tar -xzf /tmp/protozero.tar.gz
tar -xzf /tmp/osmium-tool.tar.gz

ln -sf /opt/libosmium-2.18.0 /opt/libosmium
ln -sf /opt/protozero-1.7.1 /opt/protozero
ln -sf /opt/osmium-tool-1.14.0 /opt/osmium-tool

mkdir -p /opt/osmium-tool-1.14.0/build
cd /opt/osmium-tool-1.14.0/build
cmake ..
make -j10
make install
#+end_src


*** osm2pgsql

**** Arch linux

Run in the shell:

#+begin_src shell
pamac build osm2pgsql
#+end_src

** Erlang / Elixir

*** Install dependencies

Check the [[https://github.com/asdf-vm/asdf-erlang#before-asdf-install]["before install" instructions]] for more info on why each dependency is needed

#+begin_src shell :dir /sudo::
dnf install -y openssl-devel automake autoconf ncurses-devel g++ busybox wxGTK-devel
#+end_src

*** Install Erlang

#+NAME: default_erlang_version
: 25.3

Add the plugin to asdf, install the default version and set the global version:

#+begin_src shell :var erlang_version=default_erlang_version
. $HOME/.asdf/asdf.sh
asdf plugin-add erlang
asdf install erlang ${erlang_version}
asdf global erlang ${erlang_version}
#+end_src

*** Install Elixir

#+NAME: default_elixir_version
: 1.15.6-otp-25

Before installing, let's define some default mix commands to be run after a new elixir version is added with asdf:

#+begin_src conf :tangle ~/.default-mix-commands
local.hex
local.rebar
#+end_src

Add the plugin to asdf, install the default version and set the global version:

#+begin_src shell :var elixir_version=default_elixir_version
asdf plugin-add elixir
asdf install elixir ${elixir_version}
asdf global elixir ${elixir_version}
#+end_src

*** Install hex

You usually won't need to do this, since the command is already included in the default mix commands

#+begin_src shell
mix local.hex --force
#+end_src

*** Install elixir-ls

#+begin_src shell :dir ~/.local/elixir-ls :mkdirp yes
rm -rf *
curl -fsSL https://github.com/elixir-lsp/elixir-ls/releases/download/v0.14.3/elixir-ls-1.14-25.1.zip | busybox unzip -
chmod +x language_server.sh launch.sh debugger.sh
#+end_src

*** Install Phoenix

We install phoenix in the default version so we can create phoenix projects.

#+begin_src shell
mix archive.install hex phx_new --force
#+end_src

** Rust

First install [[https://rustup.rs/][rustup]]
#+begin_src shell
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path -y --component rust-src --component rust-analyzer
#+end_src

And tangle the config:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-rust.sh
PATH=$PATH:$HOME/.cargo
#+end_src

** Plantuml

*** Install dependencies

**** Fedora

#+begin_src shell :dir /sudo::
dnf install -y java-17-openjdk
#+end_src

*** Install and configure

#+NAME: plantuml-version
: v1.2023.6

#+begin_src shell :dir ~/.local/plantuml :mkdirp yes :var version=plantuml-version
curl -fsSL https://github.com/plantuml/plantuml/releases/download/${version}/plantuml.jar > plantuml-${version}.jar

ln -sf  plantuml-${version}.jar plantuml.jar
#+end_src

Add a script to call it:

#+begin_src shell :tangle ~/.local/bin/plantuml :tangle-mode (identity #o755)
java -jar ~/.local/plantuml/plantuml.jar $@
#+end_src

** fly.io

Installing CLI:

#+begin_src shell
curl -L https://fly.io/install.sh | sh
#+end_src

Add it to path:

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-flyctl.sh
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"
#+end_src

And generate the autocomplete:

#+begin_src shell
$HOME/.fly/bin/fly completion zsh > ~/.config/zsh.d/apps.d/10-flyctl-autocomplete.sh
#+end_src

** Zig

#+name: zig-version
: 0.11.0

#+begin_src shell :dir /tmp :var version=zig-version
curl -fsSL https://ziglang.org/download/0.11.0/zig-linux-x86_64-${version}.tar.xz | tar -xJ
#+end_src

#+begin_src shell :dir /sudo:: :var version=zig-version
mv /tmp/zig-linux-x86_64-${version} /opt/zig-${version}
rm -rf /opt/zig
ln -s /opt/zig-${version} /opt/zig
#+end_src

Now the language server:

#+begin_src shell :dir /tmp :var version=zig-version
rm -rf zls-${version}
mkdir -p zls-${version}
cd zls-${version}
curl -fsSL https://github.com/zigtools/zls/releases/download/${version}/zls-x86_64-linux.tar.gz | tar xzvf -
chmod +x bin/zls
#+end_src

#+begin_src shell :dir /sudo:: :var version=zig-version
rm -rf /opt/zls-${version}
mv /tmp/zls-${version} /opt/zls-${version}
rm -rf /opt/zls
ln -s /opt/zls-${version} /opt/zls
#+end_src

#+begin_src shell :tangle ~/.config/zsh.d/apps.d/10-zig.sh
export PATH=$PATH:/opt/zig:/opt/zls/bin
#+end_src

* Cosmetics

** Make fonts great again

*** Dependencies

**** Arch Linux

Install busybox:

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm busybox
#+end_src

**** Iosevka

#+NAME: iosevka_font_version
: 3.4.6

Download iosevka:

#+begin_src shell :var iosevka_font_version=iosevka_font_version :dir ~/.fonts :mkdirp yes
curl -fsSL https://github.com/be5invis/Iosevka/releases/download/v${iosevka_font_version}/pkg-iosevka-ss12-${iosevka_font_version}.zip | busybox unzip -
#+end_src

Update cache:

#+BEGIN_SRC shell :results output silent
fc-cache -fv
#+END_SRC

*** Configure

We can now set Iosevka as the default monospaced font by tangling this file:

#+begin_src xml :tangle ~/.config/fontconfig/conf.d/10-iosevka-mono.conf :mkdirp yes
<?xml version="1.0"?>
<!DOCTYPE fontconfig SYSTEM "fonts.dtd">
<fontconfig>
  <match target="pattern">
    <edit name="dpi" mode="assign">
      <double>200</double>
    </edit>
  </match>
  <alias>
    <family>monospace</family>
    <prefer>
      <family>Iosevka Fixed SS12</family>
    </prefer>
  </alias>
  <alias>
    <family>Iosevka Fixed SS12</family>
    <default>
      <family>monospace</family>
    </default>
  </alias>
</fontconfig>
#+end_src

We also need to update Xresources since some (ahem +emacs+) programs don't understand fontconfig yet.

# TODO:  make sure this doesn't override other Xresources changes

#+begin_src shell :tangle ~/.Xresources
Xft.dpi: 150
Xft.autohint: 1
Xft.lcdfilter: lcdnone
Xft.hintstyle: hintmedium
Xft.hinting: 1
Xft.antialias: 1
Xft.rgba: rgb
#+end_src

Now apply these changes:

#+begin_src shell
xrdb -merge ~/.Xresources
#+end_src

And finally, if you're using Gnome:

#+begin_src shell
gsettings set org.gnome.desktop.interface monospace-font-name 'Iosevka Fixed SS12 11'
#+end_src

** Gnome top bar

Yeah, gnome is pretty bad at that apparently. I just install an extension for transparency:

#+begin_src sh :dir ~/reps
# git clone git@github.com:ewlsh/dynamic-panel-transparency.git
cd dynamic-panel-transparency && git checkout cd0e7ebbd0d8df3d871134a3a4b7cba16944c5e2

mkdir -p ~/.local/share/gnome-shell/extensions

EXTENSION_DIR=~/.local/share/gnome-shell/extensions/dynamic-panel-transparency@rockon999.github.io

ln -sf `pwd`/dynamic-panel-transparency@rockon999.github.io ${EXTENSION_DIR}

SCHEMADIR=${EXTENSION_DIR}/schemas

gnome-extensions enable dynamic-panel-transparency@rockon999.github.io
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-text-color false
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency remove-panel-styling true
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency maximized-opacity 0
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-opacity true
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-with-overview true
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency text-shadow-position '(1, 1, 3)'
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency text-shadow-color '(0, 0, 0, 1.0)'
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency force-theme-update false
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency icon-shadow false
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-type 1
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-windows-touch true
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-overview-text-color false
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-speed 0
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-background-color false
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency hide-corners true
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency unmaximized-opacity 0
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency force-animation false
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency text-shadow true
gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-maximized-text-color false
#+end_src

And another for hiding it. Install:

#+begin_src sh :dir /sudo::
apt update -y
apt install -y gnome-shell-extension-autohidetopbar
#+end_src

And enable/configure it:

#+begin_src sh
gnome-extensions enable hidetopbar@mathieu.bidon.ca

gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar hot-corner false
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar pressure-timeout 1000
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar animation-time-autohide 0.2
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar enable-intellihide false
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar enable-active-window false
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar mouse-sensitive true
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar shortcut-delay 1.0
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar pressure-threshold 100
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar animation-time-overview 0.4
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar mouse-triggers-overview false
gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar mouse-sensitive-fullscreen-window true
#+end_src

And restart gnome to have everything updated:

#+begin_src sh :dir /sudo::
killall -3 gnome-shell
#+end_src

** Wallpaper

Let's download one from unsplash:

#+begin_src sh :dir ~/Pictures
mkdir -p wallpapers && cd wallpapers
curl -o mountain1.jpg -fsSL https://unsplash.com/photos/1527pjeb6jg/download?force=true&w=2400
#+end_src

*** XFCE

#+begin_src shell
xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitorHDMI-1-1/workspace0/last-image --set "$HOME/Pictures/wallpapers/mountain1.jpg"
xfconf-query --channel xfce4-desktop --property /backdrop/screen0/monitoreDP-1/workspace0/last-image --set "$HOME/Pictures/wallpapers/mountain1.jpg"
#+end_src

*** Gnome

#+begin_src shell
gsettings set org.gnome.desktop.background picture-uri "file://$HOME/Pictures/wallpapers/mountain1.jpg"
#+end_src

* CAD/CAM

** Candle (grbl)

#+NAME: grbl_candle_version
: 5709b4961b8e3494d4a5e040b7223b57a0d083db

A grbl controller / g-code visualizer

*** Install dependencies

**** Arch Linux
#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm glib2 qt5-serialport cmake
#+end_src

**** Pop OS

#+begin_src shell :dir /sudo::
apt update -y && apt install -y libglib2.0-0 libqt5serialport5-dev
#+end_src

*** Build and install

Clone repo and start building:

#+begin_src shell :dir /tmp :var version=grbl_candle_version
git clone git@github.com:Denvi/Candle.git
cd Candle
git checkout ${version}
rm -rf build
mkdir build
cmake -S ./src -B ./build
cd build
make -j12
#+end_src

Now install the executable

#+begin_src shell :dir /sudo:: :var version=grbl_candle_version
cp /tmp/Candle/build/Candle /usr/local/bin/grbl-candle-${version}
ln -sf /usr/local/bin/grbl-candle-${version} /usr/local/bin/grbl-candle
chmod +x /usr/local/bin/grbl-candle-${version}
#+end_src


** FreeCAD

*** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm freecad
#+end_src

* Other

** Spotify

*** Arch Linux

Import the key:

#+begin_src shell
gpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 5E3C45D7B312C643
#+end_src

Run ~pamac build spotify~

*** Pop OS

Add Spotify repository signing keys to be able to verify downloaded packages:

#+BEGIN_SRC shell :dir /sudo::
apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90
#+END_SRC

Then add the repository

#+BEGIN_SRC shell :dir /sudo::
echo deb http://repository.spotify.com stable non-free | tee /etc/apt/sources.list.d/spotify.list
apt update
#+END_SRC

And install spotify

#+BEGIN_SRC shell :dir /sudo::
apt install -y spotify-client
#+END_SRC

Use the [[https://www.spotify.com/us/account/set-device-password/][device password]] to login.

** Command for gif recording

*** Install dependencies

**** Pop OS

#+BEGIN_SRC shell :dir /sudo::
apt install -y ffmpeg imagemagick autoconf libx11-dev
#+END_SRC

**** Arch Linux

#+BEGIN_SRC shell :dir /sudo:: :results output silent
pacman -S --noconfirm ffmpeg xorg-xdpyinfo xorg-xprop xorg-xwininfo imagemagick
#+END_SRC

*** Finish installation

And then install FFcast:

#+BEGIN_SRC shell :dir ~/reps :results output silent
[ -d 'FFcast' ] || git clone --recursive https://github.com/lolilolicon/FFcast.git
#+END_SRC

#+BEGIN_SRC shell :dir ~/reps/FFcast :results output silent
./bootstrap
./configure --enable-xrectsel --prefix /usr --libexecdir /usr/lib --sysconfdir /etc
make
#+END_SRC

#+BEGIN_SRC shell :dir /sudo::/home/caio/reps/FFcast :results output silent
make install
#+END_SRC

#+BEGIN_SRC shell :tangle /sudo::/usr/bin/gifrecord :tangle-mode (identity #o755)
#!/bin/bash
TMP_AVI=$(mktemp /tmp/outXXXXXXXXXX.avi)
ffcast -s % ffmpeg -y -f x11grab -show_region 1 -framerate 15 \
       -video_size %s -i %D+%c -codec:v huffyuv               \
       -vf crop="iw-mod(iw\\,2):ih-mod(ih\\,2)" $TMP_AVI      \
    && convert -set delay 10 -layers Optimize $TMP_AVI out.gif
#+END_SRC

** obs-studio

*** Fedora

#+begin_src src shell :dir /sudo::
sudo dnf install obs-studio
#+end_src

Now, to enable virtual camera (a thingy that will allow us to use OBS output as input in google meet), we need [[https://github.com/umlaeute/v4l2loopback][v4l2loopback]] installed. The easiest way I found was using [[https://rpmfusion.org][rpmfusion repo]], so let's install it, then install the module:

#+begin_src shell :dir /sudo::
dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-38.noarch.rpm
dnf install -y v4l2loopback
#+end_src

*** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm obs-studio
#+end_src

*** Pop OS

#+begin_src shell :dir /sudo::
add-apt-repository -y ppa:obsproject/obs-studio
apt-get update
apt install -y obs-studio
#+end_src

** Bluetooth

According to Arch Linux wiki, pairing and connecting to bluetooth devices using the CLI is the most reliable and easiest way available.

*** Install

**** Arch Linux

#+begin_src shell :dir /sudo::
pacman -Sy --noconfirm bluez-utils
#+end_src

* Playbooks

** Fix emacs signature issues

Every once in a while this breaks and emacs fails to verify elpa signatures. Run this to update them:

#+BEGIN_SRC elisp
(setq package-check-signature nil)
(package-install 'gnu-elpa-keyring-update)
(gnu-elpa-keyring-update)
(setq package-check-signature 'allow-unsigned)
#+END_SRC

And to verify it solved the issue, run:

#+BEGIN_SRC elisp
(package-refresh-contents)
#+END_SRC

If it runs without errors, then everything is back to normal.

** Enable/Disable a single webcam

Extracted from https://askubuntu.com/a/166819

Find your the vendor id and device id with ~lsusb~. If it isn't clear which device is your webcam, you can try ~lsusb -t~ and look for ~Class=Video~ or ~Driver=uvcvideo~ or similar to find the port and device number and cross-reference with the output from ~lsusb~.

Next, go to ~cd /sys/bus/usb/devices/~

To find the correct directory do a ~grep~ there with the product id and if you get multiple results then also with the vendor id:

~grep <product-id> */idProduct~ and ~grep <product-id> */idVendor~

Under the directory you found from the previous step, the file ~bConfigurationValue~ in this directory needs to contain a 0 to disable the device or a 1 to enable it. Just ~echo~ to it and the camera will be enabled or disabled.
