#+TITLE: Notebook setup (Pop OS)
#+PROPERTY: header-args:shell :results output silent
#+PROPERTY: header-args:sh :results output silent

Requirements: emacs (obviously), git

Unfortunatelly, one of the +many+ annoyances of Pop! OS is the out of
date packages. The buggy version of org-mode that comes with the
default Emacs prevents us from using this file properly, so you'll
have to update it before using. To do so, first load ~ob-sh~ and then
run the update script:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sh . t)))
#+END_SRC

#+BEGIN_SRC sh :dir /sudo::
  add-apt-repository ppa:kelleyk/emacs
  apt-get update
  apt install -y emacs26
  apt purge -y emacs25
  apt autoremove -y
#+END_SRC

After that, when on emacs 26, run:

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+END_SRC

Optionally, if you want to turn off the annoying confirmation prompts:

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Now we're all set!

* Desktop

** Setup dotfiles

   First, install zsh and change the login shell:

   #+BEGIN_SRC shell :dir /sudo:: :var user=(user-login-name)
     apt install -y zsh || true
     chsh -s /bin/zsh $user
   #+END_SRC

   Let's create a directory for some useful commands.

   #+BEGIN_SRC shell
     mkdir -p ~/utils/bin || true
   #+END_SRC

   And now some cool scripts:

   - Notify when an execution ends.

     #+BEGIN_SRC shell :tangle ~/utils/bin/exec_notify :tangle-mode (identity #o755)
       #!/usr/bin/env bash

       # Notify when execution finishes. First arg is the success message, second arg
       # is the failure message and the rest is the command to run

       (${@:3} && notify-send -t 1000 $1) || notify-send -t 1000 $2
     #+END_SRC

   Install oh-my-zsh. I used to use zsh-users/antigen but it was another
   abstraction layer on top of the plugin management that didn't bring much
   benefit to me. It tries to solve the monorepo issue with oh-my-zsh, but
   that's not an issue for me.

   #+begin_src shell
     sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

     # installing it together to be sure `ZSH_CUSTOM` is set
     git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
   #+end_src

   Now, tangle the basic zshrc:

   #+BEGIN_SRC shell :tangle ~/.zshrc
     REPS_PATH=~/reps

     export ZSH="$HOME/.oh-my-zsh"
     ZSH_THEME="gallois"

     plugins=(git
              heroku
              pip
              lein
              command-not-found
              autojump
              emacs
              archlinux
              common-aliases
              kubectl
              zsh-syntax-highlighting)

     source "$ZSH/oh-my-zsh.sh"

     # Export zsh config dir path and import base config
     export MY_ZSH_CONFIG=~/.zsh.d
     source $MY_ZSH_CONFIG/base # base config
     source $MY_ZSH_CONFIG/apps # apps config
     source $MY_ZSH_CONFIG/localrc # local dotfile
   #+END_SRC

   Now, let's tangle the base zsh config:

   #+BEGIN_SRC shell :tangle ~/.zsh.d/base :mkdirp yes
     #!/usr/bin/env bash

     # add useful scripts to the path
     export PATH=$PATH:~/utils/bin

     # gpg-agent configuration
     export GPG_TTY=$(tty)
     gpg-connect-agent updatestartuptty /bye >/dev/null

     unset SSH_AGENT_PID
     if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
       export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
     fi
   #+END_SRC

   And the main apps config:

   #+BEGIN_SRC shell :tangle ~/.zsh.d/apps
     #!/usr/bin/env bash

     # Ensure apps.d is created
     mkdir ~/.zsh.d/apps.d/ &> /dev/null || true

     for f in `ls ~/.zsh.d/apps.d/`; do
         source ~/.zsh.d/apps.d/$f
     done
   #+END_SRC

   Now let's already create some app specific configs here. First, browser config.

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-browser.sh :mkdirp true
     #!/usr/bin/env bash

     export BROWSER=chromium-browser
   #+end_src

   Now emacs:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-emacs.sh
     #!/usr/bin/env bash

     bindkey -A emacs main # set emacs as default

     # Configs for zsh to work nicelly inside emacs
     if [ -n "$INSIDE_EMACS" ]; then
         export TERM=vt100
         chpwd() { print -P "\033AnSiTc %d" }
         print -P "\033AnSiTu %n"
         print -P "\033AnSiTc %d"
     fi
   #+end_src


   Also create the ~localrc~ file. This should be the place to add local configs
   (company notebook configs for instance).

   #+BEGIN_SRC shell :dir ~/
     touch ~/.zsh.d/localrc
   #+END_SRC

** Yubikey

   Install the manager and dependencies

   #+BEGIN_SRC shell :dir /sudo::
     apt-add-repository ppa:yubico/stable
     apt update
     apt install -y yubikey-manager u2f-host libu2f-host-dev scdaemon
   #+END_SRC

   Start and enable the appropriate service

   #+BEGIN_SRC shell :dir /sudo::
     systemctl enable pcscd.service
     systemctl start pcscd.service
   #+END_SRC

   To create keys, see https://github.com/caioaao/YubiKey-Guide

   We also need to import the keys for use. For that, run =gpg --card-edit= and
   then =fetch= and exit.

** GnuPG / SSH

   Tangle the gpg-agent config.

   #+BEGIN_SRC conf :tangle ~/.gnupg/gpg-agent.conf
     enable-ssh-support
     log-file ~/.gnupg/gpg-agent.log
     allow-emacs-pinentry
     allow-loopback-pinentry
     pinentry-program /usr/bin/pinentry-gnome3
     default-cache-ttl 60
     max-cache-ttl 120
   #+END_SRC

   And the GPG config:

   #+BEGIN_SRC conf :tangle ~/.gnupg/gpg.conf
     # https://github.com/drduh/config/blob/master/gpg.conf
     # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html
     # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html
     # Use AES256, 192, or 128 as cipher
     personal-cipher-preferences AES256 AES192 AES
     # Use SHA512, 384, or 256 as digest
     personal-digest-preferences SHA512 SHA384 SHA256
     # Use ZLIB, BZIP2, ZIP, or no compression
     personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed
     # Default preferences for new keys
     default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed
     # SHA512 as digest to sign keys
     cert-digest-algo SHA512
     # SHA512 as digest for symmetric ops
     s2k-digest-algo SHA512
     # AES256 as cipher for symmetric ops
     s2k-cipher-algo AES256
     # UTF-8 support for compatibility
     charset utf-8
     # Show Unix timestamps
     fixed-list-mode
     # No comments in signature
     no-comments
     # No version in signature
     no-emit-version
     # Long hexidecimal key format
     keyid-format 0xlong
     # Display UID validity
     list-options show-uid-validity
     verify-options show-uid-validity
     # Display all keys and their fingerprints
     with-fingerprint
     # Display key origins and updates
     #with-key-origin
     # Cross-certify subkeys are present and valid
     require-cross-certification
     # Disable putting recipient key IDs into messages
     throw-keyids
     # Enable smartcard
     use-agent
   #+END_SRC

   Also install ~gcr~, as ~pinentry-gnome3~ needs it and it doesn't come
   installed together with it, for some reason.

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y gcr
   #+END_SRC

   We need to fix the DNS resolution:

   #+BEGIN_SRC shell :dir /sudo::
     ln -sf /etc/resolv.conf /run/systemd/resolve/stub-resolv.conf
   #+END_SRC

   Also, tangle the ssh config.

   #+BEGIN_SRC conf :tangle ~/.ssh/config :mkdirp yes
     GSSAPIAuthentication no
   #+END_SRC

   PS: explanation for disabling GSSApi, besides the slowness it causes in some
   cases, is presented [[https://unix.stackexchange.com/questions/65068/why-ssh-takes-a-long-time-to-connect#comment875799_65276][here]].

   And fix the slowness caused by [[https://wiki.archlinux.org/index.php/Systemd-resolved][systemd-resolved]] by tangling the following
   config file to use Google's DNS:

   #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/resolved.conf.d/dns.conf :mkdirp yes
     [Resolve]
     DNS=8.8.8.8
   #+END_SRC

   We /could/ use this to increase security a little bit, but the Ubuntu package
   is a little behind this update :\ So don't try

   # #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/resolved.conf.d/tls.conf :mkdirp yes
   #   [Resolve]
   #   DNSOverTLS=opportunistic
   # #+END_SRC

   And restart the service

   #+BEGIN_SRC shell :dir /sudo::
     systemctl restart systemd-resolved.service
   #+END_SRC

   Also import the public key so we can use it:

   #+BEGIN_SRC shell
     gpg --recv DD90B67479EFA704
   #+END_SRC

** iptables

   After some issues because of exposed ports, using iptables as a firewall
   sounds like a good idea.

   First create the systemd service:

   #+begin_src conf :tangle /sudo::/etc/systemd/system/iptables.service
     # credits: https://github.com/gronke/systemd-iptables/commit/cae73534807575f7716ee4f03a1721b9d4075d31
     [Unit]
     Description=Packet Filtering Framework
     DefaultDependencies=no
     After=systemd-sysctl.service
     Before=sysinit.target
     [Service]
     Type=oneshot
     ExecStart=/sbin/iptables-restore /etc/iptables/iptables.rules
     ExecReload=/sbin/iptables-restore /etc/iptables/iptables.rules
     ExecStop=/etc/iptables/flush-iptables.sh
     RemainAfterExit=yes
     [Install]
     WantedBy=multi-user.target
   #+end_src

   Then generate the file containing the rules and enable the service:

   #+begin_src shell :dir /sudo::
     iptables --flush
     iptables --policy INPUT DROP
     iptables --policy FORWARD DROP
     iptables --policy OUTPUT ACCEPT
     iptables --append INPUT -i lo -j ACCEPT
     iptables --append INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT
     iptables --append INPUT --jump REJECT
     iptables --append FORWARD --jump REJECT
     iptables -N DOCKER-USER
     iptables -I DOCKER-USER -i enp4s0 ! -s 127.0.0.1 -j DROP
     iptables -I DOCKER-USER -i wlp3s0 ! -s 127.0.0.1 -j DROP
     mkdir /etc/iptables || true
     iptables-save > /etc/iptables/iptables.rules

     systemctl enable iptables.service
     systemctl start iptables.service
   #+end_src

** Update systemd-resolved

   Install the script:

   #+begin_src sh :dir /sudo::/tmp
     git clone https://github.com/jonathanio/update-systemd-resolved.git
     cd update-systemd-resolved
     make
   #+end_src

** Git

   Basic configs

   #+BEGIN_SRC conf :tangle ~/.gitconfig
     [user]
     name="Caio Oliveira"
     email=caioaao@gmail.com
     signingKey=DD90B67479EFA704

     [core]
     editor=emacs

     [commit]
     gpgsign=true
   #+END_SRC

** Locale and aspell

   Set system language:

   #+BEGIN_SRC shell :dir /sudo::
     localectl set-locale LANG=en_US.UTF-8
   #+END_SRC

   Keyboard config:

   #+BEGIN_SRC shell :dir /sudo::
     localectl set-x11-keymap us pc104 altgr-intl ctrl:swapcaps
   #+END_SRC

   Installing aspell:

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y aspell aspell-en
   #+END_SRC

** StumpWM

   Make sure we have sbcl and build tools.

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y sbcl autoconf
   #+END_SRC

   To install the lisp packages we need, first we need to make sure quicklisp is
   installed:

   #+BEGIN_SRC emacs-lisp
     (install-quicklisp)
   #+END_SRC

   Now fire a SLIME REPL:

   #+BEGIN_SRC emacs-lisp
     (slime)
   #+END_SRC

   And install the CL dependencies for StumpWM.

   #+BEGIN_SRC lisp
     (ql:quickload "clx-truetype")
     (ql:quickload "clx")
     (ql:quickload "cl-ppcre")
     (ql:quickload "alexandria")
   #+END_SRC

   Now clone the project.

   #+BEGIN_SRC shell :dir /tmp
     git clone --branch 18.11 git@github.com:stumpwm/stumpwm.git
   #+END_SRC

   #+begin_src shell :dir /sudo::
     mv /tmp/stumpwm /opt/stumpwm-18.11
   #+end_src

   And build it:

   #+BEGIN_SRC shell :dir /opt/stumpwm-18.11
     autoconf
     ./configure
     make clean && make stumpwm
   #+END_SRC

   Finally, install.

   #+BEGIN_SRC shell :dir /sudo::/opt/stumpwm-18.11
     make install
   #+END_SRC

   Clone the config and create a symlink to it so stumpwm can find it.

   #+BEGIN_SRC shell :dir ~/reps
     git clone git@github.com:caioaao/stumpwm.d.git
     ln -s ~/reps/stumpwm.d ~/.stumpwm.d
   #+END_SRC

   And tangle the desktop config file:

   #+BEGIN_SRC conf :tangle /sudo::/usr/share/xsessions/stumpwm.desktop
     [Desktop Entry]
     Name=StumpWM
     Comment=StumpWM
     Exec=env gnome-session --session=stumpwm
     Exec=stumpwm
     TryExec=stumpwm
     Type=Application
     DesktopNames=StumpWM
     Keywords=tiling;wm;windowmanager;window;manager;stumpwm
   #+END_SRC

*** twmn

    Install dependencies:

    #+BEGIN_SRC shell :dir /sudo::
     # twmn dependencies
     pacman --noconfirm -Sy boost boost-libs
     pacman --noconfirm -Sy qt5-base qt5-x11extras
   #+END_SRC

    Now clone and build.

    #+BEGIN_SRC shell :dir /tmp
      git clone --branch 861a323229d34aa42c837bacb15a9d9f2cb9fa4f git@github.com:sboli/twmn.git
    #+END_SRC

    #+begin_src shell :dir /sudo::
      mv /tmp/twmn /opt/twmn
    #+end_src

    #+begin_src shell :dir /opt/twmn
      cd twmn
      qmake
      make
    #+end_src

    And install.

    #+BEGIN_SRC shell :dir /sudo::/opt/twmn
      make install
    #+END_SRC

** Redshift (screen temperature)

   Install it

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y redshift
   #+END_SRC

   Tangle the config

   #+BEGIN_SRC conf :tangle ~/.config/redshift/redshift.conf :mkdirp yes
     ; Global settings for redshift
     [redshift]
     ; Set the day and night screen temperatures
     temp-day=5700
     temp-night=3500

     ; Disable the smooth fade between temperatures when Redshift starts and stops.
     ; 0 will cause an immediate change between screen temperatures.
     ; 1 will gradually apply the new screen temperature over a couple of seconds.
     fade=1

     ; Solar elevation thresholds.
     ; By default, Redshift will use the current elevation of the sun to determine
     ; whether it is daytime, night or in transition (dawn/dusk). When the sun is
     ; above the degrees specified with elevation-high it is considered daytime and
     ; below elevation-low it is considered night.
     ;elevation-high=3
     ;elevation-low=-6

     ; Custom dawn/dusk intervals.
     ; Instead of using the solar elevation, the time intervals of dawn and dusk
     ; can be specified manually. The times must be specified as HH:MM in 24-hour
     ; format.
     ;dawn-time=6:00-7:45
     ;dusk-time=18:35-20:15

     ; Set the screen brightness. Default is 1.0.
     ;brightness=0.9
     ; It is also possible to use different settings for day and night
     ; since version 1.8.
     ;brightness-day=0.7
     ;brightness-night=0.4
     ; Set the screen gamma (for all colors, or each color channel
     ; individually)
     gamma=0.8
     ;gamma=0.8:0.7:0.8
     ; This can also be set individually for day and night since
     ; version 1.10.
     ;gamma-day=0.8:0.7:0.8
     ;gamma-night=0.6

     ; Set the location-provider: 'geoclue2', 'manual'
     ; type 'redshift -l list' to see possible values.
     ; The location provider settings are in a different section.
     location-provider=manual

     ; Set the adjustment-method: 'randr', 'vidmode'
     ; type 'redshift -m list' to see all possible values.
     ; 'randr' is the preferred method, 'vidmode' is an older API.
     ; but works in some cases when 'randr' does not.
     ; The adjustment method settings are in a different section.
     adjustment-method=randr

     ; Configuration of the location-provider:
     ; type 'redshift -l PROVIDER:help' to see the settings.
     ; ex: 'redshift -l manual:help'
     ; Keep in mind that longitudes west of Greenwich (e.g. the Americas)
     ; are negative numbers.
     [manual]
     lat=29.62
     lon=-82.37

     ; Configuration of the adjustment-method
     ; type 'redshift -m METHOD:help' to see the settings.
     ; ex: 'redshift -m randr:help'
     ; In this example, randr is configured to adjust only screen 0.
     ; Note that the numbering starts from 0, so this is actually the first screen.
     ; If this option is not specified, Redshift will try to adjust _all_ screens.
     [randr]
     screen=0
   #+END_SRC

   Enable the service:

   #+BEGIN_SRC shell
     systemctl --user enable redshift.service
   #+END_SRC

   Optionally, start the service:

   #+BEGIN_SRC shell
     systemctl --user start redshift.service
   #+END_SRC

** ProtonVPN

   First install the requirements

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y openvpn dialog wget resolvconf
   #+END_SRC

   Clone the CLI project:

   #+BEGIN_SRC shell :dir ~/reps
     [ -d protonvpn-cli ] || git clone git@github.com:ProtonVPN/protonvpn-cli.git
   #+END_SRC

   Install:

   #+BEGIN_SRC shell :dir /sudo:: :var user=(user-login-name)
     cd ~${user}/reps/protonvpn-cli
     ./protonvpn-cli.sh --install
   #+END_SRC

   Run ~sudo pvpn --init~. Use credentials from [[https://account.protonvpn.com/settings][here]]

* Development

** aws-iam-authenticator

   #+begin_src sh :dir /sudo::/tmp
     AUTHENTICATOR_VERSION=1.12.7

     curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/${AUTHENTICATOR_VERSION}/2019-03-27/bin/linux/amd64/aws-iam-authenticator
     mv aws-iam-authenticator /usr/local/bin/aws-iam-authenticator-${AUTHENTICATOR_VERSION}
     chmod 0755 /usr/local/bin/aws-iam-authenticator-${AUTHENTICATOR_VERSION}
     ln -sf /usr/local/bin/aws-iam-authenticator-${AUTHENTICATOR_VERSION} /usr/local/bin/aws-iam-authenticator
   #+end_src

** AWS's assume-role

   Tiny helper to assume roles on CLI.

   #+BEGIN_SRC sh :dir /sudo::
     apt install -y jq
   #+END_SRC

   #+BEGIN_SRC sh :dir /sudo::
     curl -L https://raw.githubusercontent.com/coinbase/assume-role/8458754982dce937f7cbb90c7da9560afe1b7210/assume-role --output /usr/local/bin/assume-role
     chmod 0755 /usr/local/bin/assume-role
   #+END_SRC

** Docker

   Install stuff

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y docker
   #+END_SRC

   Add user to docker group

   #+BEGIN_SRC shell :dir /sudo:: :var user=(user-login-name)
     usermod -aG docker ${user}
   #+END_SRC

   And create the docker bridge if it doesn't already exist:

   #+BEGIN_SRC shell :dir /sudo::
     ip link add name docker0 type bridge
     ip addr add dev docker0 172.17.0.1/16
   #+END_SRC

   Also install docker-compose (apt repository doesn't have the latest stable
   version at the moment):

   #+begin_src shell :dir /sudo::
     curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
     chmod +x /usr/local/bin/docker-compose
   #+end_src

** Clojure

   Install the Clojure package

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y clojure
   #+END_SRC

   Download leiningen.

   #+BEGIN_SRC shell :dir ~/utils/bin
     curl https://raw.githubusercontent.com/technomancy/leiningen/2.8.3/bin/lein > lein
     chmod +x lein

     # lein self-install
     ./lein
   #+END_SRC

   Also tangle the user ~profiles.clj~

   #+BEGIN_SRC clojure :tangle ~/.lein/profiles.clj
     {:user {:plugins      [[lein-pprint "1.1.2"]
                            [com.jakemccrary/lein-test-refresh "0.23.0"]]
             :dependencies [[fipp "0.6.14"]
                            [spyscope "0.1.6" :exclusions [fipp]]]
             :injections   [(require 'spyscope.core)]
             :test-refresh {:notify-command ["notify-send" "-t" "1000"]
                            :quiet          true
                            :changes-only   true}}}
   #+END_SRC

   And for clj CLI, download the installer:

   #+BEGIN_SRC shell :dir /tmp
     curl -O https://download.clojure.org/install/linux-install-1.10.0.411.sh
     chmod +x linux-install-1.10.0.411.sh
   #+END_SRC

   #+BEGIN_SRC shell :dir /sudo::/tmp
     ./linux-install-1.10.0.411.sh
   #+END_SRC

** Python

   Install pip, python3, and pip3:

   #+begin_src shell :dir /sudo::
     apt install python-pip python3 python3-pip
   #+end_src

   Install some useful development stuff.

   #+begin_src shell :dir /sudo::
     pip2 install epc jedi
     pip3 install epc jedi
   #+end_src

** R

   First, some dependencies.

   #+BEGIN_SRC shell :dir /sudo::
   pacman -S R tcl tk
   #+END_SRC

   Setup config:

   #+BEGIN_SRC R :tangle ~/.Rprofile
     options(repos=structure(c(CRAN="https://vps.fmvz.usp.br/CRAN/")))
   #+END_SRC

   Now, useful libraries:

   #+BEGIN_SRC R
     install.packages("tidyverse",
                      dependencies=TRUE)
   #+END_SRC

** Rust

   Unfortunatelly, the first command is interactive, so run this on the
   terminal: ~curl https://sh.rustup.rs -sSf | sh~. It should install everything
   and add the cargo binary directory to the ~PATH~ env in ~~/.bash_profile~.

   Let's install useful stuff for developing now. We'll be running ~source
   ~/.cargo/env~ because, as the ~PATH~ was altered in ~~/.bash_profile~, it
   will only take effect on the next login :\.

   First, racer.

   #+BEGIN_SRC shell
     source ~/.cargo/env
     cargo install racer
   #+END_SRC

   For racer to work, we need rust source code.

   #+BEGIN_SRC shell
     source ~/.cargo/env
     rustup component add rust-src
   #+END_SRC

   Now, let's set the src env var:

   #+BEGIN_SRC shell
     toolchain=`rustup toolchain list | sed 's/\(.*\) .*/\1/'`
     echo "RUST_SRC_PATH=${HOME}/.multirust/toolchains/${toolchain}/lib/rustlib/src/rust/src" >> ~/.localrc
   #+END_SRC

** Kubernetes

*** Kops

    #+begin_src sh :dir /sudo::/tmp
      KOPS_VERSION='1.12.1'

      curl -LO https://github.com/kubernetes/kops/releases/download/${KOPS_VERSION}/kops-linux-amd64
      chmod 0755 kops-linux-amd64
      mv kops-linux-amd64 /usr/local/bin/kops-${KOPS_VERSION}
      ln -sf /usr/local/bin/kops-${KOPS_VERSION} /usr/local/bin/kops
    #+end_src

*** Minikube

    Taken from [[https://kubernetes.io/docs/tasks/tools/install-minikube/][here]]

    First install a hypervisor

    #+BEGIN_SRC shell :dir /sudo::
      apt update && apt install -y virtualbox
    #+END_SRC

    Now install ~kubectl~

    #+BEGIN_SRC shell :dir /sudo::
      apt install -y apt-transport-https
      echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      apt-get update
      apt-get install -y kubectl
    #+END_SRC

    If it fails when trying to acquire the lock just run again. It's the distro trying to check for updates *sigh*

    And now download the static minikube binary and then move it to the bin dir.

    #+BEGIN_SRC shell :dir /tmp
      curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
        && chmod +x minikube
    #+END_SRC

    #+BEGIN_SRC shell :dir /sudo::
      mv /tmp/minikube /usr/local/bin
    #+END_SRC

*** Linkerd CLI

    Download, install it, and create a symlink to our local bin dir

    #+BEGIN_SRC shell
      curl -sL https://run.linkerd.io/install | sh
      ln -s ~/.linkerd2/bin/linkerd ~/utils/bin/linkerd
    #+END_SRC

*** Istio

    Download and install:

    #+BEGIN_SRC shell :dir /sudo::
      ISTIO_VERSION=1.1.7
      mkdir /opt/istio || true
      chmod 0755 /opt/istio
      cd /opt/istio
      curl -L https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/istio-${ISTIO_VERSION}-linux.tar.gz | tar xz
      ln -sf /opt/istio/istio-${ISTIO_VERSION}/bin/istioctl /usr/local/bin/istioctl
      rm -f /opt/istio/istio
      ln -sf /opt/istio/istio-${ISTIO_VERSION} /opt/istio/istio
    #+END_SRC

*** Helm

    Download and install:

    #+BEGIN_SRC shell :dir /sudo::
      mkdir /opt/helm || true
      chmod 0755 /opt/helm
      cd /opt/helm
      curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar xz
      mv linux-amd64 helm-2.12.3
      ln -sf /opt/helm/helm-2.12.3/helm /usr/local/bin/helm
      ln -sf /opt/helm/helm-2.12.3/tiller /usr/local/bin/tiller
    #+END_SRC

*** Kustomize

    Just download the binary:

    #+begin_src shell :dir /tmp
      wget https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.2/kustomize_2.0.2_linux_amd64
    #+end_src

    And configure it to be found:

    #+begin_src shell :dir /sudo::
      mkdir -p /opt/kustomize || true
      mv /tmp/kustomize_2.0.2_linux_amd64 /opt/kustomize/kustomize-2.0.2
      chmod -R 0755 /opt/kustomize
      chmod +x /opt/kustomize/kustomize-2.0.2
      ln -sf /opt/kustomize/kustomize-2.0.2 /usr/local/bin/kustomize
    #+end_src

** Terraform

   Download, extract and then move to appropriate location.

   #+begin_src shell :dir /tmp
     wget https://releases.hashicorp.com/terraform/0.12.18/terraform_0.12.18_linux_amd64.zip
     unzip terraform_0.12.18_linux_amd64.zip
   #+end_src

   #+begin_src shell :dir /sudo::
     mv /tmp/terraform /usr/local/bin/terraform-0.12.18
     ln -sf /usr/local/bin/terraform-0.12.18 /usr/local/bin/terraform
   #+end_src

   Now let's add some aliases to our shell:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-terraform.sh
     #!/usr/bin/env bash
     alias tfplan='terraform plan -out=plan.tfplan'
     alias tfapply='terraform apply --refresh=false plan.tfplan'
     alias tfrapply='terraform apply plan.tfplan'
   #+end_src

** git-lfs

   #+begin_src shell :dir /sudo::/tmp
     curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
     apt install -y git-lfs
   #+end_src

** golang

   First install go (Ubuntu has an old version only):

   #+begin_src shell :dir /tmp
     curl -sL https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz | tar xvz
   #+end_src

   #+begin_src shell :dir /sudo::
     mv /tmp/go /opt/go-1.13.3
     ln -sf /opt/go-1.13.3 /opt/go
   #+end_src

   And add go executables to our path:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-golang.sh
     #!/usr/bin/env bash

     export GOROOT=/opt/go
     export GOPATH=~/go
     export PATH="$PATH:$GOROOT/bin"
     export PATH="$PATH:$PATH/bin"
   #+end_src

   Now the goodies:

   #+begin_src shell
     go get golang.org/x/tools/cmd/godoc
     go get golang.org/x/tools/cmd/goimports
     go get github.com/rogpeppe/godef
   #+end_src

** protobuf

   Download, extract and configure:

   #+begin_src shell :dir /tmp
     #curl -sL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.2/protobuf-cpp-3.11.2.tar.gz | tar zx
     cd protobuf-3.11.2
     ./configure
     make
     make check -j 13
   #+end_src

   Install and refresh shared library cache

   #+begin_src shell :dir /sudo::/tmp/protobuf-3.11.2
     make install
     ldconfig
   #+end_src

** Gradle

   Ubuntu's repo only has version 4, so we'll use sdkman to install and use newer versions. First install sdkman

   #+begin_src shell
     curl -s "https://get.sdkman.io" | bash
   #+end_src

   And add to the zsh app configs

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-sdkman.sh
     #!usr/bin/env bash
     source "$HOME/.sdkman/bin/sdkman-init.sh"
   #+end_src

   Now install Gradle:

   #+begin_src shell
     source "$HOME/.sdkman/bin/sdkman-init.sh"
     sdk install gradle 6.0.1
   #+end_src

** Flatbuffers

   Install deps:

   #+begin_src shell :dir /sudo::
     apt install -y cmake
   #+end_src

   Clone repo, generate makefiles and build:

   #+begin_src shell :dir /tmp
     git clone --branch 1.11.0 git@github.com:google/flatbuffers.git
   #+end_src

   #+begin_src shell :dir /sudo::/opt
     mv /tmp/flatbuffers /opt/flatbuffers-1.11.0
   #+end_src

   #+begin_src shell :dir /opt/flatbuffers-1.11.0
     cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
     make
   #+end_src

   And install

   #+begin_src shell :dir /sudo::/opt/flatbuffers-1.11.0
     make install
   #+end_src

** Java

   My editor of choice is Emacs, but even then we need Eclipse to work with
   Java... We do this by using eclim. This setup is based on [[http://www.goldsborough.me/emacs,/java/2016/02/24/22-54-16-setting_up_emacs_for_java_development/][this blog post]].

   Install Eclipse:

   #+begin_src shell :dir /sudo::/opt
     curl -sL http://ftp.osuosl.org/pub/eclipse/technology/epp/downloads/release/2019-12/R/eclipse-java-2019-12-R-linux-gtk-x86_64.tar.gz | tar xvz
   #+end_src

   Add Eclipse local dir to path.

   #+begin_src shell :tangle ~/.zsh.d/apps.d/eclipse
     #/usr/bin/env bash

     export PATH="${PATH}:${HOME}/.eclipse/org.eclipse.platform_4.14.0_1473617060_linux_gtk_x86_64"
   #+end_src

   Install eclim:

   #+begin_src shell :dir /tmp
     curl -sL https://github.com/ervandew/eclim/releases/download/2.8.0/eclim_2.8.0.bin > eclim_2.8.0.bin
     chmod +x eclim_2.8.0.bin
     ./eclim_2.8.0.bin \
       --yes \
       --eclipse=/opt/eclipse \
       --plugins=jdt \
       --vimfiles=skip
   #+end_src

* Other

** Setup ~udev~ rule for HDMI cable

   Create script that checks HDMI status and executes xrandr. Remember to change
   ~DISPLAY~ to match the one used on the machine.

   #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/toggle_display :tangle-mode (identity #o755) :padline no
     #!/usr/bin/env bash

     export DISPLAY=":0.0"

     USER=`ps -aux | grep Xorg | cut -d\  -f 1 | head -n1`

     export XAUTHORITY="/home/${USER}/.Xauthority"

     CARDS=("card0" "card1")

     for CARD in ${CARDS[*]}; do
         HDMI_STATUS_PATH="/sys/class/drm/$CARD-HDMI-A-1/status"
         if [ -f $HDMI_STATUS_PATH ]; then
             HDMI_STATUS=`cat $HDMI_STATUS_PATH`

             # echo "------------------------------------------------" >> /tmp/toggle_monitor.log
             # echo "$(date) - DISPLAY: ${DISPLAY}, HDMI_STATUS: ${HDMI_STATUS}, USER: ${USER}" >> /tmp/toggle_monitor.log
             xrandr > /dev/null # >> /tmp/toggle_monitor.log

             if [[ ${HDMI_STATUS} == 'connected' ]]; then
                 # echo "Turning monitor on" >> /tmp/toggle_monitor.log
                 xrandr --output eDP1 --auto --pos 0x360 --output HDMI1 --auto --pos 1920x0
             else
                 # echo "Turning monitor off" >> /tmp/toggle_monitor.log
                 xrandr --output HDMI1 --off
             fi
         fi
     done
   #+END_SRC

   Create udev rule:

   #+BEGIN_SRC sh :tangle /sudo::/etc/udev/rules.d/90-monitor.rules :padline no
     KERNEL=="card0", SUBSYSTEM=="drm", RUN+="/usr/local/bin/toggle_display"
     KERNEL=="card1", SUBSYSTEM=="drm", RUN+="/usr/local/bin/toggle_display"
   #+END_SRC

   After tangle, run this to enable the systemd unit and reload udev rules.

   #+BEGIN_SRC sh :dir /sudo::/
     udevadm control --reload
   #+END_SRC

** Ledger CLI

   First, let's clone

   #+BEGIN_SRC shell :dir ~/reps
     if [ -d 'ledger' ]; then
         cd ledger
         git pull origin next
     else
         git clone git@github.com:ledger/ledger.git
     fi
   #+END_SRC

   Make sure CMake is present:

   #+BEGIN_SRC shell :dir /sudo::
     pacman -Syy --noconfirm cmake
   #+END_SRC

   Now build. This is also the command for updating it.

   #+BEGIN_SRC shell :dir ~/reps/ledger
     ./acprep update
   #+END_SRC

   And install:

   #+BEGIN_SRC shell :dir /sudo::~/reps/ledger
   make install
   #+END_SRC

** Command for gif recording

   Dependencies:

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y ffmpeg imagemagick autoconf libx11-dev
   #+END_SRC

   And then install FFcast:

   #+BEGIN_SRC shell :dir /tmp
     [ -d 'FFcast' ] || git clone --branch 2.5.0 --recursive git@github.com:lolilolicon/FFcast.git
   #+END_SRC

   #+begin_src shell :dir /sudo::
     mv /tmp/FFcast /opt/FFcast-2.5.0
   #+end_src

   #+BEGIN_SRC shell :dir /opt/FFcast-2.5.0
     ./bootstrap
     ./configure --enable-xrectsel --prefix /usr --libexecdir /usr/lib --sysconfdir /etc
     make
   #+END_SRC

   #+BEGIN_SRC shell :dir /sudo::/opt/FFcast-2.5.0
     make install
   #+END_SRC

   #+BEGIN_SRC shell :tangle /sudo::/usr/bin/gifrecord :tangle-mode (identity #o755)
     #!/bin/bash
     TMP_AVI=$(mktemp /tmp/outXXXXXXXXXX.avi)
     ffcast -s ffmpeg -y -f x11grab -show_region 1 -framerate 15   \
            -video_size %s -i %D+%c -codec:v huffyuv               \
            -vf crop="iw-mod(iw\\,2):ih-mod(ih\\,2)" $TMP_AVI      \
         && convert -set delay 10 -define registry:temporary-path=/tmp -layers Optimize $TMP_AVI out.gif
   #+END_SRC

** xml-coreutils

   Cool little tools to work with XML files.

   Download, configure and build:

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y libslang2 libslang2-dev libncurses5 libncurses5-dev
   #+END_SRC

   #+BEGIN_SRC shell :dir /tmp
     wget https://downloads.sourceforge.net/project/xml-coreutils/xml-coreutils-0.8.1.tar.gz
     tar xfz xml-coreutils-0.8.1.tar.gz
     cd xml-coreutils-0.8.1
     ./configure
     make
     make check
   #+END_SRC

   #+RESULTS:

   Now install

   #+BEGIN_SRC shell :dir /sudo::/tmp/xml-coreutils-0.8.1
     make install
   #+END_SRC

** Spotify

   Add Spotify repository signing keys to be able to verify downloaded packages:

   #+BEGIN_SRC shell :dir /sudo::
     apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90
   #+END_SRC

   Then add the repository

   #+BEGIN_SRC shell :dir /sudo::
     echo deb http://repository.spotify.com stable non-free | tee /etc/apt/sources.list.d/spotify.list
     apt update
   #+END_SRC

   And install spotify

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y spotify-client
   #+END_SRC

   Use the [[https://www.spotify.com/us/account/set-device-password/][device password]] to login.

** Org exporter

   Tangle the following file. It will search for a Dropbox token in
   ~/.tokens/dropbox.txt and use it to upload all files inside
   /tmp/org-exported. See [[https://orgmode.org/manual/Exporting-agenda-views.html][this manual]] for an easy way of exporting agenda views.

   #+BEGIN_SRC shell :tangle ~/utils/bin/org_to_dropbox :tangle-mode (identity #o755)
     #!/usr/bin/env bash

     org_exported_dir='/tmp/org-exported'

     mkdir ${org_exported_dir} || true

     /usr/bin/emacs -eval '(org-batch-store-agenda-views)' -kill

     for f in $(ls ${org_exported_dir}/*.org); do
         curl -X POST https://content.dropboxapi.com/2/files/upload \
             --header "Authorization: Bearer $(cat ~/.tokens/dropbox.txt)" \
             --header "Dropbox-API-Arg: {\"path\": \"/$(basename ${f})\",\"mode\": \"overwrite\"}" \
             --header "Content-Type: application/octet-stream" \
             --data-binary @${f}
     done
   #+END_SRC

   This pre-push hook can be safely added to any repo:

   #+BEGIN_SRC shell
     #!/bin/sh
     command -v org_to_dropbox &>/dev/null && org_to_dropbox
   #+END_SRC

** PlantUML

   It's a cool little tool to create diagrams. I use it basically for sequence
   diagrams though.

   #+BEGIN_SRC shell :dir ~/utils :mkdirp yes
     mkdir jars || true
     cd jars
     wget https://sourceforge.net/projects/plantuml/files/plantuml.1.2019.0.jar
     ln -s plantuml.1.2019.0.jar plantuml.jar
   #+END_SRC

   Done! To call it directly, run ~java -jar ~/utils/jars/plantuml.jar file1
   file2 file3~. Emacs should already be configured to find the jar in this
   location.
** SteelSeries Rival 100 configuration

   First we need the CLI tool. For that, first install its dependencies:

   #+begin_src sh :dir /sudo::
     apt install -y build-essential python-dev libusb-1.0-0-dev libudev-dev
   #+end_src

   Now install rivalcfg

   #+begin_src sh :dir /sudo::
     pip install rivalcfg==3.6.0
   #+end_src

   Now, the configs:

   #+begin_src sh
   rivalcfg -s 1000 -S 1000 -c '#ff2019'
   #+end_src
