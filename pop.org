#+TITLE: Notebook setup (Pop OS 20.04)
#+PROPERTY: header-args:shell :results output silent
#+PROPERTY: header-args:sh :results output silent
#+PROPERTY: header-args:elisp :results output silent
#+PROPERTY: header-args:emacs-lisp :results output silent

Requirements: emacs (obviously), git

Unfortunatelly, one of the +many+ annoyances of Pop! OS is the out of date
packages. The buggy version of org-mode that comes with the default Emacs
prevents us from using this file properly, so you'll have to update it before
using. To do so, first run the update script:

#+BEGIN_SRC emacs-lisp
  (require 'ob-sh)
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((sh . t)))
#+END_SRC

#+BEGIN_SRC sh :dir /sudo::
  add-apt-repository ppa:kelleyk/emacs
  apt-get update
  apt install -y emacs26
  apt purge -y emacs25
  apt autoremove -y
#+END_SRC

After that, when on emacs 26, run:

#+BEGIN_SRC elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+END_SRC

Optionally, if you want to turn off the annoying confirmation prompts:

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Now we're all set!

* Desktop

** Emacs

   We need to disable the active-menu shortcut (clashes with ~M-SPC~).

   #+begin_src sh
   gsettings set org.gnome.desktop.wm.keybindings activate-window-menu []
   #+end_src

** Setup dotfiles

   First, install zsh and change the login shell:

   #+BEGIN_SRC shell :dir /sudo:: :var user=(user-login-name)
     apt install -y zsh || true
     chsh -s /bin/zsh $user
   #+END_SRC

   Let's create a directory for some useful commands.

   #+BEGIN_SRC shell
     mkdir -p ~/utils/bin || true
   #+END_SRC

   And now some cool scripts:

   - Notify when an execution ends.

     #+BEGIN_SRC shell :tangle ~/utils/bin/exec_notify :tangle-mode (identity #o755)
       #!/usr/bin/env bash

       # Notify when execution finishes. First arg is the success message, second arg
       # is the failure message and the rest is the command to run

       (${@:3} && notify-send -t 1000 $1) || notify-send -t 1000 $2
     #+END_SRC

   Install oh-my-zsh. I used to use zsh-users/antigen but it was another
   abstraction layer on top of the plugin management that didn't bring much
   benefit to me. It tries to solve the monorepo issue with oh-my-zsh, but
   that's not an issue for me.

   #+begin_src shell
     sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

     # installing it together to be sure `ZSH_CUSTOM` is set
     git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
   #+end_src

   Now, tangle the basic zshrc:

   #+BEGIN_SRC shell :tangle ~/.zshrc
     REPS_PATH=~/reps

     export ZSH="$HOME/.oh-my-zsh"
     ZSH_THEME="gallois"

     plugins=(git
              heroku
              pip
              lein
              command-not-found
              autojump
              emacs
              archlinux
              common-aliases
              kubectl
              zsh-syntax-highlighting)

     source "$ZSH/oh-my-zsh.sh"

     # Export zsh config dir path and import base config
     export MY_ZSH_CONFIG=~/.zsh.d
     source $MY_ZSH_CONFIG/base # base config
     source $MY_ZSH_CONFIG/apps # apps config
     source $MY_ZSH_CONFIG/localrc # local dotfile
   #+END_SRC

   Now, let's tangle the base zsh config:

   #+BEGIN_SRC shell :tangle ~/.zsh.d/base :mkdirp yes
     #!/usr/bin/env bash

     # add useful scripts to the path
     export PATH=$PATH:~/utils/bin

     # gpg-agent configuration
     export GPG_TTY=$(tty)
     gpg-connect-agent updatestartuptty /bye >/dev/null

     unset SSH_AGENT_PID
     if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
       export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
     fi
   #+END_SRC

   And the main apps config:

   #+BEGIN_SRC shell :tangle ~/.zsh.d/apps
     #!/usr/bin/env bash

     # Ensure apps.d is created
     mkdir ~/.zsh.d/apps.d/ &> /dev/null || true

     for f in `ls ~/.zsh.d/apps.d/`; do
         source ~/.zsh.d/apps.d/$f
     done
   #+END_SRC

   Now let's already create some app specific configs here. First, browser config.

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-browser.sh :mkdirp true
     #!/usr/bin/env bash

     export BROWSER=chromium
   #+end_src

   Now it's a good time as any to set xdg default browser to chromium too:

   #+begin_src sh
   xdg-settings set default-web-browser chromium.desktop
   #+end_src

   Now emacs:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-emacs.sh
     #!/usr/bin/env bash

     bindkey -A emacs main # set emacs as default

     # Configs for zsh to work nicelly inside emacs
     if [ -n "$INSIDE_EMACS" ]; then
         export TERM=vt100
         chpwd() { print -P "\033AnSiTc %d" }
         print -P "\033AnSiTu %n"
         print -P "\033AnSiTc %d"
     fi
   #+end_src


   Also create the ~localrc~ file. This should be the place to add local configs
   (company notebook configs for instance).

   #+BEGIN_SRC shell :dir ~/
     touch ~/.zsh.d/localrc
   #+END_SRC

** Yubikey

   Install the manager and dependencies

   #+BEGIN_SRC shell :dir /sudo::
     apt-add-repository ppa:yubico/stable
     apt update
     apt install -y yubikey-manager u2f-host libu2f-host-dev scdaemon
   #+END_SRC

   Start and enable the appropriate service

   #+BEGIN_SRC shell :dir /sudo::
     systemctl enable pcscd.service
     systemctl start pcscd.service
   #+END_SRC

   To create keys, see https://github.com/caioaao/YubiKey-Guide

   We also need to import the keys for use. For that, run =gpg --card-edit= and
   then =fetch= and exit.

** GnuPG / SSH

   Tangle the gpg-agent config.

   #+BEGIN_SRC conf :tangle ~/.gnupg/gpg-agent.conf
     enable-ssh-support
     log-file ~/.gnupg/gpg-agent.log
     allow-emacs-pinentry
     allow-loopback-pinentry
     pinentry-program /usr/bin/pinentry-gnome3
     default-cache-ttl 60
     max-cache-ttl 120
   #+END_SRC

   And the GPG config:

   #+BEGIN_SRC conf :tangle ~/.gnupg/gpg.conf
   # https://github.com/drduh/config/blob/master/gpg.conf
   # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Configuration-Options.html
   # https://www.gnupg.org/documentation/manuals/gnupg/GPG-Esoteric-Options.html
   # Use AES256, 192, or 128 as cipher
   personal-cipher-preferences AES256 AES192 AES
   # Use SHA512, 384, or 256 as digest
   personal-digest-preferences SHA512 SHA384 SHA256
   # Use ZLIB, BZIP2, ZIP, or no compression
   personal-compress-preferences ZLIB BZIP2 ZIP Uncompressed
   # Default preferences for new keys
   default-preference-list SHA512 SHA384 SHA256 AES256 AES192 AES ZLIB BZIP2 ZIP Uncompressed
   # SHA512 as digest to sign keys
   cert-digest-algo SHA512
   # SHA512 as digest for symmetric ops
   s2k-digest-algo SHA512
   # AES256 as cipher for symmetric ops
   s2k-cipher-algo AES256
   # UTF-8 support for compatibility
   charset utf-8
   # Show Unix timestamps
   fixed-list-mode
   # No comments in signature
   no-comments
   # No version in signature
   no-emit-version
   # Long hexidecimal key format
   keyid-format 0xlong
   # Display UID validity
   list-options show-uid-validity
   verify-options show-uid-validity
   # Display all keys and their fingerprints
   with-fingerprint
   # Display key origins and updates
   #with-key-origin
   # Cross-certify subkeys are present and valid
   require-cross-certification
   # Disable putting recipient key IDs into messages
   throw-keyids
   # Enable smartcard
   use-agent
   # "SKS is dying" https://code.firstlook.media/the-death-of-sks-pgp-keyservers-and-how-first-look-media-is-handling-it
   keyserver hkps://keys.openpgp.org
   #+END_SRC

   Also install ~gcr~, as ~pinentry-gnome3~ needs it and it doesn't come
   installed together with it, for some reason.

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y gcr
   #+END_SRC

   We need to fix the DNS resolution:

   #+BEGIN_SRC shell :dir /sudo::
     ln -sf /etc/resolv.conf /run/systemd/resolve/stub-resolv.conf
   #+END_SRC

   Also, tangle the ssh config.

   #+BEGIN_SRC conf :tangle ~/.ssh/config :mkdirp yes
     GSSAPIAuthentication no
   #+END_SRC

   PS: explanation for disabling GSSApi, besides the slowness it causes in some
   cases, is presented [[https://unix.stackexchange.com/questions/65068/why-ssh-takes-a-long-time-to-connect#comment875799_65276][here]].

   And fix the slowness caused by [[https://wiki.archlinux.org/index.php/Systemd-resolved][systemd-resolved]] by tangling the following
   config file to use Google's DNS:

   #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/resolved.conf.d/dns.conf :mkdirp yes
     [Resolve]
     DNS=8.8.8.8
   #+END_SRC

   We /could/ use this to increase security a little bit, but the Ubuntu package
   is a little behind this update :\ So don't try

   # #+BEGIN_SRC conf :tangle /sudo::/etc/systemd/resolved.conf.d/tls.conf :mkdirp yes
   #   [Resolve]
   #   DNSOverTLS=opportunistic
   # #+END_SRC

   And restart the service

   #+BEGIN_SRC shell :dir /sudo::
     systemctl restart systemd-resolved.service
   #+END_SRC

   Also import the public key so we can use it:

   #+BEGIN_SRC shell
   gpg --keyserver hkps://keys.openpgp.org --recv DD90B67479EFA704
   #+END_SRC

** iptables firewall

   After some issues because of exposed ports, using iptables as a firewall
   sounds like a good idea.

   First create the systemd service and the flush script:

   #+begin_src conf :tangle /sudo::/etc/systemd/system/iptables.service
     # credits: https://github.com/gronke/systemd-iptables/commit/cae73534807575f7716ee4f03a1721b9d4075d31
     [Unit]
     Description=Packet Filtering Framework
     DefaultDependencies=no
     After=systemd-sysctl.service
     Before=sysinit.target
     [Service]
     Type=oneshot
     ExecStart=/usr/sbin/iptables-restore /etc/iptables/iptables.rules
     ExecReload=/usr/sbin/iptables-restore /etc/iptables/iptables.rules
     ExecStop=/etc/iptables/iptables-flush.sh
     RemainAfterExit=yes
     [Install]
     WantedBy=multi-user.target
   #+end_src

   #+begin_src shell :tangle /sudo::/etc/iptables/iptables-flush.sh :mkdirp true :tangle-mode (identity #o755) :dir /sudo::
     #!/usr/bin/env bash
     iptables -F
     iptables -X
     iptables -t nat -F
     iptables -t nat -X
     iptables -t mangle -F
     iptables -t mangle -X
     iptables -P INPUT ACCEPT
     iptables -P FORWARD ACCEPT
     iptables -P OUTPUT ACCEPT
   #+end_src

   Then generate the file containing the rules and enable the service:

   #+begin_src shell :dir /sudo::
     # Flush all rules
     /etc/iptables/iptables-flush.sh

     # Default rule to drop incoming traffic
     iptables --policy INPUT DROP
     iptables --policy FORWARD DROP
     iptables --policy OUTPUT ACCEPT

     # Rules to allow outgoing traffic
     iptables --append INPUT -i lo -j ACCEPT
     iptables --append INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT
     iptables --append INPUT --jump REJECT

     iptables --append FORWARD --match state --state ESTABLISHED,RELATED -j ACCEPT
     iptables --append FORWARD -o enp+ -j ACCEPT
     iptables --append FORWARD -o wlp+ -j ACCEPT
     iptables --append FORWARD --jump REJECT

     # Rules to allow outgoing traffic from docker containers
     iptables -N DOCKER-USER
     iptables --append DOCKER-USER -i enp+ --match state --state ESTABLISHED,RELATED -j ACCEPT
     iptables --append DOCKER-USER -i wlp+ --match state --state ESTABLISHED,RELATED -j ACCEPT
     iptables --append DOCKER-USER -i enp+ -j DROP
     iptables --append DOCKER-USER -i wlp+ -j DROP

     mkdir -p /etc/iptables || true
     iptables-save > /etc/iptables/iptables.rules

     systemctl enable iptables.service
     systemctl start iptables.service
   #+end_src

** Update systemd-resolved

   Install the script:

   #+begin_src sh :dir /sudo::/tmp
     git clone https://github.com/jonathanio/update-systemd-resolved.git
     cd update-systemd-resolved
     make
   #+end_src

** Git

   Basic configs

   #+BEGIN_SRC conf :tangle ~/.gitconfig
     [user]
     name="Caio Oliveira"
     email=caioaao@gmail.com
     signingKey=DD90B67479EFA704

     [core]
     editor=emacs

     [commit]
     gpgsign=true
   #+END_SRC

** Locale and aspell

   Set system language:

   #+BEGIN_SRC shell :dir /sudo::
     localectl set-locale LANG=en_US.UTF-8
   #+END_SRC

   Keyboard config:

   #+BEGIN_SRC shell :dir /sudo::
     localectl set-x11-keymap us pc104 altgr-intl ctrl:swapcaps
   #+END_SRC

   Installing aspell:

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y aspell aspell-en
   #+END_SRC

** StumpWM

   Make sure we have sbcl and build tools.

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y sbcl autoconf
   #+END_SRC

   To install the lisp packages we need, first we need to make sure quicklisp is
   installed:

   #+BEGIN_SRC emacs-lisp
     (install-quicklisp)
   #+END_SRC

   Now fire a SLIME REPL:

   #+BEGIN_SRC emacs-lisp
     (slime)
   #+END_SRC

   And install the CL dependencies for StumpWM.

   #+BEGIN_SRC lisp
     (ql:quickload "clx-truetype")
     (ql:quickload "clx")
     (ql:quickload "cl-ppcre")
     (ql:quickload "alexandria")
   #+END_SRC

   Now clone the project.

   #+BEGIN_SRC shell :dir /tmp
     git clone --branch 18.11 git@github.com:stumpwm/stumpwm.git
   #+END_SRC

   #+begin_src shell :dir /sudo::
     mv /tmp/stumpwm /opt/stumpwm-18.11
   #+end_src

   And build it:

   #+BEGIN_SRC shell :dir /opt/stumpwm-18.11
     autoconf
     ./configure
     make clean && make stumpwm
   #+END_SRC

   Finally, install.

   #+BEGIN_SRC shell :dir /sudo::/opt/stumpwm-18.11
     make install
   #+END_SRC

   Clone the config and create a symlink to it so stumpwm can find it.

   #+BEGIN_SRC shell :dir ~/reps
     git clone git@github.com:caioaao/stumpwm.d.git
     ln -s ~/reps/stumpwm.d ~/.stumpwm.d
   #+END_SRC

   And tangle the desktop config file:

   #+BEGIN_SRC conf :tangle /sudo::/usr/share/xsessions/stumpwm.desktop
     [Desktop Entry]
     Name=StumpWM
     Comment=StumpWM
     Exec=env gnome-session --session=stumpwm
     Exec=stumpwm
     TryExec=stumpwm
     Type=Application
     DesktopNames=StumpWM
     Keywords=tiling;wm;windowmanager;window;manager;stumpwm
   #+END_SRC

*** twmn

    Install dependencies:

    #+BEGIN_SRC shell :dir /sudo::
     # twmn dependencies
     pacman --noconfirm -Sy boost boost-libs
     pacman --noconfirm -Sy qt5-base qt5-x11extras
   #+END_SRC

    Now clone and build.

    #+BEGIN_SRC shell :dir /tmp
      git clone --branch 861a323229d34aa42c837bacb15a9d9f2cb9fa4f git@github.com:sboli/twmn.git
    #+END_SRC

    #+begin_src shell :dir /sudo::
      mv /tmp/twmn /opt/twmn
    #+end_src

    #+begin_src shell :dir /opt/twmn
      cd twmn
      qmake
      make
    #+end_src

    And install.

    #+BEGIN_SRC shell :dir /sudo::/opt/twmn
      make install
    #+END_SRC

** Redshift (screen temperature)

   Install it

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y redshift
   #+END_SRC

   Tangle the config

   #+BEGIN_SRC conf :tangle ~/.config/redshift/redshift.conf :mkdirp yes
     ; Global settings for redshift
     [redshift]
     ; Set the day and night screen temperatures
     temp-day=5700
     temp-night=3500

     ; Disable the smooth fade between temperatures when Redshift starts and stops.
     ; 0 will cause an immediate change between screen temperatures.
     ; 1 will gradually apply the new screen temperature over a couple of seconds.
     fade=1

     ; Solar elevation thresholds.
     ; By default, Redshift will use the current elevation of the sun to determine
     ; whether it is daytime, night or in transition (dawn/dusk). When the sun is
     ; above the degrees specified with elevation-high it is considered daytime and
     ; below elevation-low it is considered night.
     ;elevation-high=3
     ;elevation-low=-6

     ; Custom dawn/dusk intervals.
     ; Instead of using the solar elevation, the time intervals of dawn and dusk
     ; can be specified manually. The times must be specified as HH:MM in 24-hour
     ; format.
     ;dawn-time=6:00-7:45
     ;dusk-time=18:35-20:15

     ; Set the screen brightness. Default is 1.0.
     ;brightness=0.9
     ; It is also possible to use different settings for day and night
     ; since version 1.8.
     ;brightness-day=0.7
     ;brightness-night=0.4
     ; Set the screen gamma (for all colors, or each color channel
     ; individually)
     gamma=0.8
     ;gamma=0.8:0.7:0.8
     ; This can also be set individually for day and night since
     ; version 1.10.
     ;gamma-day=0.8:0.7:0.8
     ;gamma-night=0.6

     ; Set the location-provider: 'geoclue2', 'manual'
     ; type 'redshift -l list' to see possible values.
     ; The location provider settings are in a different section.
     location-provider=manual

     ; Set the adjustment-method: 'randr', 'vidmode'
     ; type 'redshift -m list' to see all possible values.
     ; 'randr' is the preferred method, 'vidmode' is an older API.
     ; but works in some cases when 'randr' does not.
     ; The adjustment method settings are in a different section.
     adjustment-method=randr

     ; Configuration of the location-provider:
     ; type 'redshift -l PROVIDER:help' to see the settings.
     ; ex: 'redshift -l manual:help'
     ; Keep in mind that longitudes west of Greenwich (e.g. the Americas)
     ; are negative numbers.
     [manual]
     lat=29.62
     lon=-82.37

     ; Configuration of the adjustment-method
     ; type 'redshift -m METHOD:help' to see the settings.
     ; ex: 'redshift -m randr:help'
     ; In this example, randr is configured to adjust only screen 0.
     ; Note that the numbering starts from 0, so this is actually the first screen.
     ; If this option is not specified, Redshift will try to adjust _all_ screens.
     [randr]
     screen=0
   #+END_SRC

   Enable the service:

   #+BEGIN_SRC shell
     systemctl --user enable redshift.service
   #+END_SRC

   Optionally, start the service:

   #+BEGIN_SRC shell
     systemctl --user start redshift.service
   #+END_SRC

** tmux

   #+begin_src conf :tangle ~/.tmux.conf
     unbind-key C-b
     set -g prefix 'C-q'
     bind-key 'C-q' send-prefix
     bind-key 'C-r' source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
     bind-key 'C-w' run -b "tmux show-buffer | xsel -i"
   #+end_src

** TLP

   To help reduce battery usage and temperature.

   First install tlp and dependencies:

   #+begin_src shell :dir /sudo::
     apt install -y tlp
   #+end_src

   And tangle its configs. Most of the defaults are good enough

   #+begin_src conf :tangle /sudo::/etc/tlp.d/10-cpu-underload.conf
     CPU_MIN_PERF_ON_AC=0
     CPU_MAX_PERF_ON_AC=80
     CPU_MIN_PERF_ON_BAT=0
     CPU_MAX_PERF_ON_BAT=25
   #+end_src

** Iosevka font

   #+NAME: iosevka_font_version
    : 3.4.6

   Download font:

   #+begin_src shell :var iosevka_font_version=iosevka_font_version
     mkdir -p ~/.fonts
     cd ~/.fonts
     curl -fsSL https://github.com/be5invis/Iosevka/releases/download/v${iosevka_font_version}/pkg-iosevka-ss12-${iosevka_font_version}.zip | busybox unzip -
   #+end_src

   Update cache:

   #+begin_src shell :dir /sudo::
     fc-cache -f -v
   #+end_src

   Set system mono font to Iosevka:

   #+begin_src shell
     gsettings set org.gnome.desktop.interface monospace-font-name '"Iosevka Fixed SS12"'
     gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$(gsettings get org.gnome.Terminal.ProfilesList default)/ use-system-font false
     gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$(gsettings get org.gnome.Terminal.ProfilesList default)/ font '"Iosevka Fixed SS12"'
   #+end_src

** Wallpaper

   Let's download one from unsplash:

   #+begin_src sh :dir ~/Pictures
   mkdir -p wallpapers && cd wallpapers
   curl -o unsplash-cqbLg3lZEpk.jpg -fsSL https://unsplash.com/photos/cqbLg3lZEpk/download?force=true&w=2400
   gsettings set org.gnome.desktop.background picture-uri "file://$(pwd)/unsplash-cqbLg3lZEpk.jpg"
   #+end_src

** Customize top bar

   Yeah, gnome is pretty bad at that apparently. I just install an extension for transparency:

   #+begin_src sh :dir ~/reps
   # git clone git@github.com:ewlsh/dynamic-panel-transparency.git
   cd dynamic-panel-transparency && git checkout cd0e7ebbd0d8df3d871134a3a4b7cba16944c5e2

   mkdir -p ~/.local/share/gnome-shell/extensions

   EXTENSION_DIR=~/.local/share/gnome-shell/extensions/dynamic-panel-transparency@rockon999.github.io

   ln -sf `pwd`/dynamic-panel-transparency@rockon999.github.io ${EXTENSION_DIR}

   SCHEMADIR=${EXTENSION_DIR}/schemas

   gnome-extensions enable dynamic-panel-transparency@rockon999.github.io
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-text-color false
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency remove-panel-styling true
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency maximized-opacity 0
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-opacity true
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-with-overview true
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency text-shadow-position '(1, 1, 3)'
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency text-shadow-color '(0, 0, 0, 1.0)'
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency force-theme-update false
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency icon-shadow false
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-type 1
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-windows-touch true
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-overview-text-color false
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency transition-speed 0
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-background-color false
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency hide-corners true
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency unmaximized-opacity 0
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency force-animation false
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency text-shadow true
   gsettings --schemadir ${SCHEMADIR} set org.gnome.shell.extensions.dynamic-panel-transparency enable-maximized-text-color false
   #+end_src

   And another for hiding it. Install:

   #+begin_src sh :dir /sudo::
   apt update -y
   apt install -y gnome-shell-extension-autohidetopbar
   #+end_src

   And enable/configure it:

   #+begin_src sh
   gnome-extensions enable hidetopbar@mathieu.bidon.ca

   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar hot-corner false
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar pressure-timeout 1000
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar animation-time-autohide 0.2
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar enable-intellihide false
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar enable-active-window false
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar mouse-sensitive true
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar shortcut-delay 1.0
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar pressure-threshold 100
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar animation-time-overview 0.4
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar mouse-triggers-overview false
   gsettings --schemadir /usr/share/gnome-shell/extensions/hidetopbar@mathieu.bidon.ca/schemas set org.gnome.shell.extensions.hidetopbar mouse-sensitive-fullscreen-window true
   #+end_src

   And restart gnome to have everything updated:

      #+begin_src sh :dir /sudo::
     killall -3 gnome-shell
   #+end_src

* Development

** Guile Scheme

   #+begin_src sh :dir /sudo::
     apt install -y guile-3.0
   #+end_src

** asdf

   First clone the repo:

   #+begin_src sh
     git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.8
   #+end_src

   Now add the completions and the executable to dot files:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-browser.sh :mkdirp true
     #!/usr/bin/env bash
     . $HOME/.asdf/asdf.sh
     . $HOME/.asdf/completions/asdf.bash
   #+end_src

** Javascript/Typescript

   First install node:

   #+begin_src sh :dir /sudo::
     apt-get install -y node
   #+end_src

   Install TS repl:

   #+begin_src sh :dir /sudo::
     # TODO running this from org-mode messes with node_modules permissions for some
     # reason
     npm install -g typescript ts-node tsun
   #+end_src

   Now install yarn:

   #+begin_src shell :dir /sudo::
     curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
     echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
     apt update && apt install -y yarn
   #+end_src

   And add yarn's executables to path:

   #+begin_src shell :tangle  ~/.zsh.d/apps.d/10-yarn.sh
     export PATH="$PATH:`yarn global bin`"
   #+end_src

** Fix emacs signature issues

   Every once in a while this breaks and emacs fails to verify elpa signatures. Run this to update them:

   #+BEGIN_SRC elisp
     (setq package-check-signature nil)
     (package-install 'gnu-elpa-keyring-update)
     (gnu-elpa-keyring-update)
     (setq package-check-signature 'allow-unsigned)
   #+END_SRC

   And to verify it solved the issue, run:

   #+BEGIN_SRC elisp
     (package-refresh-contents)
   #+END_SRC

   If it runs without errors, then everything is back to normal.

** aws-iam-authenticator

   #+begin_src sh :dir /sudo::/tmp
     AUTHENTICATOR_VERSION=1.12.7

     curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/${AUTHENTICATOR_VERSION}/2019-03-27/bin/linux/amd64/aws-iam-authenticator
     mv aws-iam-authenticator /usr/local/bin/aws-iam-authenticator-${AUTHENTICATOR_VERSION}
     chmod 0755 /usr/local/bin/aws-iam-authenticator-${AUTHENTICATOR_VERSION}
     ln -sf /usr/local/bin/aws-iam-authenticator-${AUTHENTICATOR_VERSION} /usr/local/bin/aws-iam-authenticator
   #+end_src

** AWS's assume-role

   Tiny helper to assume roles on CLI.

   #+BEGIN_SRC sh :dir /sudo::
     apt install -y jq
   #+END_SRC

   #+BEGIN_SRC sh :dir /sudo::
     curl -L https://raw.githubusercontent.com/coinbase/assume-role/8458754982dce937f7cbb90c7da9560afe1b7210/assume-role --output /usr/local/bin/assume-role
     chmod 0755 /usr/local/bin/assume-role
   #+END_SRC

** Docker

   Install stuff

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y docker
   #+END_SRC

   Add user to docker group

   #+BEGIN_SRC shell :dir /sudo:: :var user=(user-login-name)
     usermod -aG docker ${user}
   #+END_SRC

   And create the docker bridge if it doesn't already exist:

   #+BEGIN_SRC shell :dir /sudo::
     ip link add name docker0 type bridge
     ip addr add dev docker0 172.17.0.1/16
   #+END_SRC

   Also install docker-compose (apt repository doesn't have the latest stable
   version at the moment):

   #+begin_src shell :dir /sudo::
     curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
     chmod +x /usr/local/bin/docker-compose
   #+end_src

** Clojure

   Install the Clojure package

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y clojure
   #+END_SRC

*** Lein

    Download leiningen.

    #+BEGIN_SRC shell :dir ~/utils/bin
      curl https://raw.githubusercontent.com/technomancy/leiningen/2.8.3/bin/lein > lein
      chmod +x lein

      # lein self-install
      ./lein
    #+END_SRC

    Also tangle the user ~profiles.clj~

    #+BEGIN_SRC clojure :tangle ~/.lein/profiles.clj :mkdirp yes
      {:user {:plugins      [[lein-pprint "1.1.2"]
                             [com.jakemccrary/lein-test-refresh "0.23.0"]]
              :dependencies [[fipp "0.6.14"]
                             [hashp "0.1.1"]
                             [com.cemerick/pomegranate "0.4.0"]]
              :injections   [(require 'hashp.core)]
              :repl-options {:init
                             (defn add-dependency [dep-vec]
                               (require 'cemerick.pomegranate)
                               ((resolve 'cemerick.pomegranate/add-dependencies)
                                :coordinates [dep-vec]
                                :repositories (merge @(resolve 'cemerick.pomegranate.aether/maven-central)
                                                     {"clojars" "https://clojars.org/repo"})))}
              :test-refresh {:notify-command ["notify-send" "-t" "1000"]
                             :quiet          true
                             :changes-only   true}}}
    #+END_SRC

*** clj cli

    #+BEGIN_SRC shell :dir /tmp
      curl -O https://download.clojure.org/install/linux-install-1.10.0.411.sh
      chmod +x linux-install-1.10.0.411.sh
    #+END_SRC

    #+BEGIN_SRC shell :dir /sudo::/tmp
      ./linux-install-1.10.0.411.sh
    #+END_SRC

*** clojure-lsp

    Download server:

    #+begin_src shell :dir /sudo::/tmp
      curl -fsSL https://github.com/snoe/clojure-lsp/releases/download/release-20200314T202821/clojure-lsp > clojure-lsp
      chmod 0755 clojure-lsp
      mv clojure-lsp /usr/bin
    #+end_src

** Python

   Install pip, python3, and pip3:

   #+begin_src shell :dir /sudo::
     apt install python-pip python3 python3-pip
   #+end_src

   Install some useful development stuff.

   #+begin_src shell :dir /sudo::
     pip2 install epc jedi
     pip3 install epc jedi
   #+end_src

** R

   First, some dependencies.

   #+BEGIN_SRC shell :dir /sudo::
   pacman -S R tcl tk
   #+END_SRC

   Setup config:

   #+BEGIN_SRC R :tangle ~/.Rprofile
     options(repos=structure(c(CRAN="https://vps.fmvz.usp.br/CRAN/")))
   #+END_SRC

   Now, useful libraries:

   #+BEGIN_SRC R
     install.packages("tidyverse",
                      dependencies=TRUE)
   #+END_SRC

** Rust

   Unfortunatelly, the first command is interactive, so run this on the
   terminal: ~curl https://sh.rustup.rs -sSf | sh~. It should install everything
   and add the cargo binary directory to the ~PATH~ env in ~~/.bash_profile~.

   Let's install useful stuff for developing now. We'll be running ~source
   ~/.cargo/env~ because, as the ~PATH~ was altered in ~~/.bash_profile~, it
   will only take effect on the next login :\.

   First, racer.

   #+BEGIN_SRC shell
     source ~/.cargo/env
     cargo install racer
   #+END_SRC

   For racer to work, we need rust source code.

   #+BEGIN_SRC shell
     source ~/.cargo/env
     rustup component add rust-src
   #+END_SRC

   Now, let's set the src env var:

   #+BEGIN_SRC shell
     toolchain=`rustup toolchain list | sed 's/\(.*\) .*/\1/'`
     echo "RUST_SRC_PATH=${HOME}/.multirust/toolchains/${toolchain}/lib/rustlib/src/rust/src" >> ~/.localrc
   #+END_SRC

** Kubernetes

*** kubectl

    #+NAME: default_kubectl_version
    : 1.15.11

    First the deps:

    #+BEGIN_SRC shell :dir /sudo::
      apt install -y apt-transport-https
    #+END_SRC

    Now add the plugin to asdf and install the default version:

    #+begin_src shell :var kubectl_version=default_kubectl_version
      asdf plugin-add kubectl
      asdf install kubectl ${kubectl_version}
    #+end_src

    Now setup kubectl global version:

    #+begin_src shell :var kubectl_version=default_kubectl_version
      asdf global kubectl ${kubectl_version}
    #+end_src

*** Kops

    #+begin_src sh :dir /sudo::/tmp
      KOPS_VERSION='1.16.0'

      curl -LO https://github.com/kubernetes/kops/releases/download/v${KOPS_VERSION}/kops-linux-amd64
      chmod 0755 kops-linux-amd64
      mv kops-linux-amd64 /usr/local/bin/kops-${KOPS_VERSION}
      ln -sf /usr/local/bin/kops-${KOPS_VERSION} /usr/local/bin/kops
    #+end_src

*** Minikube

    Taken from [[https://kubernetes.io/docs/tasks/tools/install-minikube/][here]]

    #+NAME: minikube_version
    : v1.10.1


    First install a hypervisor

    #+BEGIN_SRC shell :dir /sudo::
      apt update && apt install -y virtualbox
    #+END_SRC

    And now download the static minikube binary and then move it to the bin dir.

    #+BEGIN_SRC shell :dir /tmp :var minikube_version=minikube_version
      curl -Lo minikube "https://storage.googleapis.com/minikube/releases/${minikube_version}/minikube-linux-amd64" \
        && chmod +x minikube
    #+END_SRC

    #+BEGIN_SRC shell :dir /sudo:: :var minikube_version=minikube_version
      mv /tmp/minikube "/usr/local/bin/minikube-${minikube_version}"
      ln -sf "/usr/local/bin/minikube-${minikube_version}" /usr/local/bin/minikube
    #+END_SRC

*** Linkerd CLI

    Download, install it, and create a symlink to our local bin dir

    #+BEGIN_SRC shell
      curl -sL https://run.linkerd.io/install | sh
      ln -s ~/.linkerd2/bin/linkerd ~/utils/bin/linkerd
    #+END_SRC

*** Istio

    Download and install:

    #+BEGIN_SRC shell :dir /sudo::
      ISTIO_VERSION=1.5.1
      mkdir /opt/istio || true
      chmod -R 0755 /opt/istio
      cd /opt/istio
      curl -L https://github.com/istio/istio/releases/download/${ISTIO_VERSION}/istio-${ISTIO_VERSION}-linux.tar.gz | tar xz
      ln -sf /opt/istio/istio-${ISTIO_VERSION}/bin/istioctl /usr/local/bin/istioctl
      rm -f /opt/istio/istio
      ln -sf /opt/istio/istio-${ISTIO_VERSION} /opt/istio/istio
    #+END_SRC

*** Helm

    Download and install:

    #+BEGIN_SRC shell :dir /sudo::
      mkdir /opt/helm || true
      chmod 0755 /opt/helm
      cd /opt/helm
      curl -L https://get.helm.sh/helm-v3.0.2-linux-amd64.tar.gz | tar xz
      mv linux-amd64 helm-3.0.2
      ln -sf /opt/helm/helm-3.0.2/helm /usr/local/bin/helm
    #+END_SRC

*** Kustomize

    Just download the binary:

    #+begin_src shell :dir /tmp
      wget https://github.com/kubernetes-sigs/kustomize/releases/download/v2.0.2/kustomize_2.0.2_linux_amd64
    #+end_src

    And configure it to be found:

    #+begin_src shell :dir /sudo::
      mkdir -p /opt/kustomize || true
      mv /tmp/kustomize_2.0.2_linux_amd64 /opt/kustomize/kustomize-2.0.2
      chmod -R 0755 /opt/kustomize
      chmod +x /opt/kustomize/kustomize-2.0.2
      ln -sf /opt/kustomize/kustomize-2.0.2 /usr/local/bin/kustomize
    #+end_src

*** kube-capacity

    #+begin_src sh :dir /tmp
      curl -fsSL https://github.com/robscott/kube-capacity/releases/download/0.4.0/kube-capacity_0.4.0_Linux_x86_64.tar.gz | tar -xz
    #+end_src

    #+begin_src sh :dir /sudo::
      mv /tmp/kube-capacity /usr/local/bin
      chown root:root /usr/local/bin/kube-capacity
    #+end_src

** Terraform

   #+NAME: terraform_version
    : 0.12.25

   Download, extract and then move to appropriate location.

   #+begin_src shell :dir /tmp :var version=terraform_version
     wget https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip
     unzip terraform_${version}_linux_amd64.zip
   #+end_src

   #+begin_src shell :dir /sudo:: :var version=terraform_version
     mv /tmp/terraform /usr/local/bin/terraform-${version}
     ln -sf /usr/local/bin/terraform-${version} /usr/local/bin/terraform
   #+end_src

   Now let's add some aliases to our shell:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-terraform.sh
     #!/usr/bin/env bash
     alias tfplan='terraform plan -out=plan.tfplan'
     alias tfapply='terraform apply --refresh=false plan.tfplan'
     alias tfrapply='terraform apply plan.tfplan'
   #+end_src

** git-lfs

   #+begin_src shell :dir /sudo::/tmp
     curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash
     apt install -y git-lfs
   #+end_src

** golang

   First install go (Ubuntu has an old version only):

   #+begin_src shell :dir /tmp
     curl -sL https://dl.google.com/go/go1.13.3.linux-amd64.tar.gz | tar xvz
   #+end_src

   #+begin_src shell :dir /sudo::
     mv /tmp/go /opt/go-1.13.3
     ln -sf /opt/go-1.13.3 /opt/go
   #+end_src

   And add go executables to our path:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-golang.sh
     #!/usr/bin/env bash

     export GOROOT=/opt/go
     export GOPATH=~/go
     export PATH="$PATH:$GOROOT/bin"
     export PATH="$PATH:$PATH/bin"
     export PATH="$PATH:$GOPATH/bin"
   #+end_src

   Now the goodies:

   #+begin_src shell
   go get golang.org/x/tools/cmd/godoc
   go get golang.org/x/tools/cmd/goimports
   go get github.com/rogpeppe/godef
   go get golang.org/x/tools/gopls
   #+end_src

** protobuf

   Download, extract and configure:

   #+begin_src shell :dir /tmp
     #curl -sL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.2/protobuf-cpp-3.11.2.tar.gz | tar zx
     cd protobuf-3.11.2
     ./configure
     make
     make check -j 13
   #+end_src

   Install and refresh shared library cache

   #+begin_src shell :dir /sudo::/tmp/protobuf-3.11.2
     make install
     ldconfig
   #+end_src

** Gradle

   Ubuntu's repo only has version 4, so we'll use sdkman to install and use newer versions. First install sdkman

   #+begin_src shell
     curl -s "https://get.sdkman.io" | bash
   #+end_src

   And add to the zsh app configs

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-sdkman.sh
     #!usr/bin/env bash
     source "$HOME/.sdkman/bin/sdkman-init.sh"
   #+end_src

   Now install Gradle:

   #+begin_src shell
     source "$HOME/.sdkman/bin/sdkman-init.sh"
     sdk install gradle 6.0.1
   #+end_src

** Flatbuffers

   Install deps:

   #+begin_src shell :dir /sudo::
     apt install -y cmake
   #+end_src

   Clone repo, generate makefiles and build:

   #+begin_src shell :dir /tmp
     git clone --branch 1.11.0 git@github.com:google/flatbuffers.git
   #+end_src

   #+begin_src shell :dir /sudo::/opt
     mv /tmp/flatbuffers /opt/flatbuffers-1.11.0
   #+end_src

   #+begin_src shell :dir /opt/flatbuffers-1.11.0
     cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
     make
   #+end_src

   And install

   #+begin_src shell :dir /sudo::/opt/flatbuffers-1.11.0
     make install
   #+end_src

** Java

   My editor of choice is Emacs, but even then we need Eclipse to work with
   Java... We do this by using eclim. This setup is based on [[http://www.goldsborough.me/emacs,/java/2016/02/24/22-54-16-setting_up_emacs_for_java_development/][this blog post]].

   Install Eclipse:

   #+begin_src shell :dir /sudo::/opt
     curl -sL http://ftp.osuosl.org/pub/eclipse/technology/epp/downloads/release/2019-12/R/eclipse-java-2019-12-R-linux-gtk-x86_64.tar.gz | tar xvz
   #+end_src

   Add Eclipse local dir to path.

   #+begin_src shell :tangle ~/.zsh.d/apps.d/eclipse
     #/usr/bin/env bash

     export PATH="${PATH}:${HOME}/.eclipse/org.eclipse.platform_4.14.0_1473617060_linux_gtk_x86_64"
   #+end_src

   Install eclim:

   #+begin_src shell :dir /tmp
     curl -sL https://github.com/ervandew/eclim/releases/download/2.8.0/eclim_2.8.0.bin > eclim_2.8.0.bin
     chmod +x eclim_2.8.0.bin
     ./eclim_2.8.0.bin \
       --yes \
       --eclipse=/opt/eclipse \
       --plugins=jdt \
       --vimfiles=skip
   #+end_src

** NodeJS

   #+begin_src shell :dir /sudo::
     curl -sL https://deb.nodesource.com/setup_10.x | bash -
     apt-get install -y nodejs
   #+end_src

** Flutter

   #+NAME: flutter_version
   : 1.20.0-stable

   First install:

   #+begin_src shell :dir /tmp :var version=flutter_version
   curl -sL https://storage.googleapis.com/flutter_infra/releases/stable/linux/flutter_linux_${version}.tar.xz | tar xJ
   #+end_src

   #+begin_src shell :dir /sudo:: :var version=flutter_version
   mv /tmp/flutter /opt/flutter-v${version}
   rm -f /opt/flutter
   ln -sf /opt/flutter-v${version} /opt/flutter
   #+end_src

   And then add it to path:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-flutter.sh
     #!/usr/bin/env bash

     export FLUTTER_SDK=/opt/flutter
     export PATH="$PATH:$FLUTTER_SDK/bin"
   #+end_src

   Also, optionally, we can pre-download dev dependencies:

   #+begin_src shell :dir /opt/flutter
     ./bin/flutter precache
   #+end_src

   And disable analytics. ffs google...

   #+begin_src shell :dir /opt/flutter
     ./bin/flutter config --no-analytics
   #+end_src

*** DevTools

    #+begin_src shell
    flutter pub global activate devtools
    #+end_src

** Android studio

   #+begin_src shell :dir /tmp
     curl -sL https://redirector.gvt1.com/edgedl/android/studio/ide-zips/3.6.1.0/android-studio-ide-192.6241897-linux.tar.gz | tar -xvz
   #+end_src

   #+begin_src shell :dir /sudo::
     mv /tmp/android-studio /opt/android-studio-192.6241897
     ln -sf /opt/android-studio-192.6241897 /opt/android-studio
   #+end_src

   Add to path:

      #+begin_src shell :tangle ~/.zsh.d/apps.d/10-android-studio.sh
        #!/usr/bin/env bash

        export PATH="$PATH:/opt/android-studio/bin"
   #+end_src

   Create a launcher by tangling the following:

   #+begin_src conf :tangle /sudo::/usr/share/applications/android-studio.desktop
     [Desktop Entry]
     Version=1.0
     Name=Android Studio
     Terminal=false
     StartupWMClass=jetbrains-android-studio
     Exec="/opt/android-studio/bin/studio.sh" %f
     Icon=/opt/android-studio/bin/studio.png
     Type=Application
     StartupNotify=true
     Categories=Development;IDE;
     Name[en_GB]=android-studio.desktop
   #+end_src

   Now run ~studio.sh~ to start the Setup Wizard.

** OCaml

   #+begin_src shell :dir /sudo::
     apt install -y ocaml opam
   #+end_src

   Now init opam:

   #+begin_src shell
     touch ~/.zsh.d/apps.d/10-opam.sh
     opam init -a --dot-profile ~/.zsh.d/apps.d/10-opam.sh \
          --enable-shell-hook --enable-completion --shell=zsh --reinit
     eval $(opam env)
   #+end_src

   Install LSP server:

   #+begin_src shell
     opam pin add -y ocaml-lsp-server https://github.com/ocaml/ocaml-lsp.git
     opam install ocaml-lsp-server
   #+end_src

   Also install ReasonML LSP server:

   #+NAME: reason_ls_version
   : 1.7.9

   #+begin_src shell :dir /tmp :var version=reason_ls_version
     curl -fsSL https://github.com/jaredly/reason-language-server/releases/download/${version}/rls-linux.zip | busybox unzip -
   #+end_src

   #+begin_src shell :dir /sudo:: :var version=reason_ls_version
     mv /tmp/rls-linux /opt/reason-ls-${version}
     chmod +x /opt/reason-ls-${version}/reason-language-server
     ln -sf /opt/reason-ls-${version}/reason-language-server /usr/local/bin/reason-language-server
   #+end_src

** Alacritty

   #+begin_src shell :dir /sudo::
     apt install -y alacritty
   #+end_src

   Tangle the config:

   #+begin_src yaml :tangle ~/.config/alacritty/alacritty.yml :mkdirp yes
   font:
     # The normal (roman) font face to use.
     normal:
       family: Iosevka Fixed SS12
       style: Regular

     # The bold font face
     bold:
       family: Iosevka Fixed SS12
       style: Bold

     # The italic font face
     italic:
       family: Iosevka Fixed SS12
       style: Italic

     # Point size of the font
     size: 12.0

   colors:
     primary:
       background: '#333333'

   window:
     decorations: none
     padding:
       x: 5
       y: 10
   #+end_src

** clang/llvm

   #+begin_src sh :dir /sudo::
     apt update -y && apt install -y clang llvm
   #+end_src

** gcloud

   #+NAME: gcloud_sdk_version
   : 310.0.0

   #+begin_src shell :dir /tmp :var version=gcloud_sdk_version
   curl -fsSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${version}-linux-x86_64.tar.gz | tar -xz
   #+end_src

   #+begin_src shell :dir /sudo:: :var version=gcloud_sdk_version
   mv /tmp/google-cloud-sdk /opt/google-cloud-sdk-${version}
   ln -sf /opt/google-cloud-sdk-${version} /opt/google-cloud-sdk
   #+end_src

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-gcloud.sh
   if [ -f '/opt/google-cloud-sdk/path.zsh.inc' ]; then . '/opt/google-cloud-sdk/path.zsh.inc'; fi
   if [ -f '/opt/google-cloud-sdk/completion.zsh.inc' ]; then . '/opt/google-cloud-sdk/completion.zsh.inc'; fi
   #+end_src

   #+begin_src shell
   gcloud config set disable_usage_reporting true
   #+end_src

*** SQL Proxy

    #+begin_src shell :dir /tmp
    curl -fsSL https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 > gcloud-sql-proxy
    chmod +x gcloud-sql-proxy
    #+end_src

    #+begin_src shell :dir /sudo::
    mv /tmp/gcloud-sql-proxy /usr/bin
    #+end_src

** nix

   the install script prompts for password, so you have to run it on the shell :sad:

   ~sh <(curl -L https://nixos.org/nix/install) --daemon~

   After the multi-user install, tangle this (for some reason nixos is not updating zshrc):

   #+begin_src sh :tangle ~/.zsh.d/apps.d/10-nix.sh
   . /etc/profile.d/nix.sh
   #+end_src

* CAD/CAM

** libfive

   #+NAME: libfive_version
   : e1da2fb6c2171a399c9a109e99e83d704310a6e2

   #+begin_src sh :dir /sudo::
     apt install -y cmake pkg-config libeigen3-dev libpng-dev libboost-all-dev qtbase5-dev guile-2.2-dev
   #+end_src

   #+begin_src sh  :dir /tmp
     git clone git@github.com:libfive/libfive.git
   #+end_src

   #+begin_src sh :dir /sudo:: :var version=libfive_version
     mv /tmp/libfive "/opt/libfive-${version}"
     ln -sf "/opt/libfive-${version}" /opt/libfive
   #+end_src

   #+begin_src sh :var version=libfive_version :dir /opt/libfive
     git checkout ${version}
     rm -rf .git
     mkdir -p build
     cd build
     cmake ..
     make -j12
   #+end_src

   #+begin_src sh :dir /sudo::/opt/libfive/build
     make install
     ldconfig
   #+end_src

** Candle (grbl)

   #+NAME: grbl_candle_version
   : 5709b4961b8e3494d4a5e040b7223b57a0d083db

   A grbl controller / g-code visualizer

   First install dependencies and create installation/build dir:

   #+begin_src sh :dir /sudo:: :var version=grbl_candle_version
     apt update -y && apt install -y libglib2.0-0 libqt5serialport5-dev
     mkdir -p "/opt/grbl-candle-${version}"
     ln -sf "/opt/grbl-candle-${version}" "/opt/grbl-candle"
     chmod -R 0777 "/opt/grbl-candle-${version}"
   #+end_src

   Clone repo and start building:

   #+begin_src sh :dir ~/reps :var commit_sha=grbl_candle_version
     git clone git@github.com:Denvi/Candle.git
     cd Candle && git checkout ${commit_sha}
     cd /opt/grbl-candle
     cmake ~/reps/Candle/src
     make -j12
   #+end_src

   Now fix opt permissions and run install

   #+begin_src sh :dir /sudo::/opt/grbl-candle
     chmod -R 0755 .
     ln -sf /opt/grbl-candle/Candle /usr/local/bin/grbl-candle
   #+end_src

* Other

** Setup ~udev~ rule for HDMI cable

   Create script that checks HDMI status and executes xrandr. Remember to change
   ~DISPLAY~ to match the one used on the machine.

   #+BEGIN_SRC sh :tangle /sudo::/usr/local/bin/toggle_display :tangle-mode (identity #o755) :padline no
     #!/usr/bin/env bash

     export DISPLAY=":0.0"

     USER=`ps -aux | grep Xorg | cut -d\  -f 1 | head -n1`

     export XAUTHORITY="/home/${USER}/.Xauthority"

     CARDS=("card0" "card1")

     for CARD in ${CARDS[*]}; do
         HDMI_STATUS_PATH="/sys/class/drm/$CARD-HDMI-A-1/status"
         if [ -f $HDMI_STATUS_PATH ]; then
             HDMI_STATUS=`cat $HDMI_STATUS_PATH`

             # echo "------------------------------------------------" >> /tmp/toggle_monitor.log
             # echo "$(date) - DISPLAY: ${DISPLAY}, HDMI_STATUS: ${HDMI_STATUS}, USER: ${USER}" >> /tmp/toggle_monitor.log
             xrandr > /dev/null # >> /tmp/toggle_monitor.log

             if [[ ${HDMI_STATUS} == 'connected' ]]; then
                 # echo "Turning monitor on" >> /tmp/toggle_monitor.log
                 xrandr --output eDP1 --auto --pos 0x360 --output HDMI1 --auto --pos 1920x0
             else
                 # echo "Turning monitor off" >> /tmp/toggle_monitor.log
                 xrandr --output HDMI1 --off
             fi
         fi
     done
   #+END_SRC

   Create udev rule:

   #+BEGIN_SRC sh :tangle /sudo::/etc/udev/rules.d/90-monitor.rules :padline no
     KERNEL=="card0", SUBSYSTEM=="drm", RUN+="/usr/local/bin/toggle_display"
     KERNEL=="card1", SUBSYSTEM=="drm", RUN+="/usr/local/bin/toggle_display"
   #+END_SRC

   After tangle, run this to enable the systemd unit and reload udev rules.

   #+BEGIN_SRC sh :dir /sudo::/
     udevadm control --reload
   #+END_SRC

** Ledger CLI

   First, let's clone

   #+BEGIN_SRC shell :dir ~/reps
     if [ -d 'ledger' ]; then
         cd ledger
         git pull origin next
     else
         git clone git@github.com:ledger/ledger.git
     fi
   #+END_SRC

   Make sure CMake is present:

   #+BEGIN_SRC shell :dir /sudo::
     pacman -Syy --noconfirm cmake
   #+END_SRC

   Now build. This is also the command for updating it.

   #+BEGIN_SRC shell :dir ~/reps/ledger
     ./acprep update
   #+END_SRC

   And install:

   #+BEGIN_SRC shell :dir /sudo::~/reps/ledger
   make install
   #+END_SRC

** Command for gif recording

   Dependencies:

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y ffmpeg imagemagick autoconf libx11-dev
   #+END_SRC

   And then install FFcast:

   #+BEGIN_SRC shell :dir /tmp
     [ -d 'FFcast' ] || git clone --branch 2.5.0 --recursive git@github.com:lolilolicon/FFcast.git
   #+END_SRC

   #+begin_src shell :dir /sudo::
     mv /tmp/FFcast /opt/FFcast-2.5.0
   #+end_src

   #+BEGIN_SRC shell :dir /opt/FFcast-2.5.0
     ./bootstrap
     ./configure --enable-xrectsel --prefix /usr --libexecdir /usr/lib --sysconfdir /etc
     make
   #+END_SRC

   #+BEGIN_SRC shell :dir /sudo::/opt/FFcast-2.5.0
     make install
   #+END_SRC

   #+BEGIN_SRC shell :tangle /sudo::/usr/bin/gifrecord :tangle-mode (identity #o755)
     #!/bin/bash
     TMP_AVI=$(mktemp /tmp/outXXXXXXXXXX.avi)
     ffcast -s ffmpeg -y -f x11grab -show_region 1 -framerate 15   \
            -video_size %s -i %D+%c -codec:v huffyuv               \
            -vf crop="iw-mod(iw\\,2):ih-mod(ih\\,2)" $TMP_AVI      \
         && convert -set delay 10 -define registry:temporary-path=/tmp -layers Optimize $TMP_AVI out.gif
   #+END_SRC

** xml-coreutils

   Cool little tools to work with XML files.

   Download, configure and build:

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y libslang2 libslang2-dev libncurses5 libncurses5-dev
   #+END_SRC

   #+BEGIN_SRC shell :dir /tmp
     wget https://downloads.sourceforge.net/project/xml-coreutils/xml-coreutils-0.8.1.tar.gz
     tar xfz xml-coreutils-0.8.1.tar.gz
     cd xml-coreutils-0.8.1
     ./configure
     make
     make check
   #+END_SRC

   #+RESULTS:

   Now install

   #+BEGIN_SRC shell :dir /sudo::/tmp/xml-coreutils-0.8.1
     make install
   #+END_SRC

** Spotify

   Add Spotify repository signing keys to be able to verify downloaded packages:

   #+BEGIN_SRC shell :dir /sudo::
     apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 931FF8E79F0876134EDDBDCCA87FF9DF48BF1C90
   #+END_SRC

   Then add the repository

   #+BEGIN_SRC shell :dir /sudo::
     echo deb http://repository.spotify.com stable non-free | tee /etc/apt/sources.list.d/spotify.list
     apt update
   #+END_SRC

   And install spotify

   #+BEGIN_SRC shell :dir /sudo::
     apt install -y spotify-client
   #+END_SRC

   Use the [[https://www.spotify.com/us/account/set-device-password/][device password]] to login.

** Org exporter

   Tangle the following file. It will search for a Dropbox token in
   ~/.tokens/dropbox.txt and use it to upload all files inside
   /tmp/org-exported. See [[https://orgmode.org/manual/Exporting-agenda-views.html][this manual]] for an easy way of exporting agenda views.

   #+BEGIN_SRC shell :tangle ~/utils/bin/org_to_dropbox :tangle-mode (identity #o755)
     #!/usr/bin/env bash

     org_exported_dir='/tmp/org-exported'

     mkdir ${org_exported_dir} || true

     /usr/bin/emacs -eval '(org-batch-store-agenda-views)' -kill

     for f in $(ls ${org_exported_dir}/*.org); do
         curl -X POST https://content.dropboxapi.com/2/files/upload \
             --header "Authorization: Bearer $(cat ~/.tokens/dropbox.txt)" \
             --header "Dropbox-API-Arg: {\"path\": \"/$(basename ${f})\",\"mode\": \"overwrite\"}" \
             --header "Content-Type: application/octet-stream" \
             --data-binary @${f}
     done
   #+END_SRC

   This pre-push hook can be safely added to any repo:

   #+BEGIN_SRC shell
     #!/bin/sh
     command -v org_to_dropbox &>/dev/null && org_to_dropbox
   #+END_SRC

** PlantUML

   It's a cool little tool to create diagrams. I use it basically for sequence
   diagrams though.

   #+BEGIN_SRC shell :dir ~/utils :mkdirp yes
     mkdir jars || true
     cd jars
     wget https://sourceforge.net/projects/plantuml/files/plantuml.1.2019.0.jar
     ln -s plantuml.1.2019.0.jar plantuml.jar
   #+END_SRC

   Done! To call it directly, run ~java -jar ~/utils/jars/plantuml.jar file1
   file2 file3~. Emacs should already be configured to find the jar in this
   location.
** SteelSeries Rival 100 configuration

   First we need the CLI tool. For that, first install its dependencies:

   #+begin_src sh :dir /sudo::
     apt install -y build-essential python-dev libusb-1.0-0-dev libudev-dev
   #+end_src

   Now install rivalcfg

   #+begin_src sh :dir /sudo::
     pip install rivalcfg==3.6.0
   #+end_src

   Now, the configs:

   #+begin_src sh
   rivalcfg -s 1000 -S 1000 -c '#ff2019'
   #+end_src

** Audio settings

   Better audio with pulseaudio.

   #+begin_src conf :tangle ~/.config/pulse/daemon.conf
     default-sample-format = float32le
     default-sample-rate = 48000
     alternate-sample-rate = 44100
     default-sample-channels = 2
     default-channel-map = front-left,front-right
     default-fragments = 2
     default-fragment-size-msec = 125
     resample-method = soxr-vhq
     enable-lfe-remixing = no
     high-priority = yes
     nice-level = -11
     realtime-scheduling = yes
     realtime-priority = 9
     rlimit-rtprio = 9
     daemonize = no
   #+end_src

   Configure ALSA to use PulseAudio hw plugin:

   #+begin_src conf :tangle ~/.asoundrc
     pcm.!default {
        type plug
        slave.pcm hw
     }
   #+end_src

** exercism.io

   #+NAME: exercism_cli_version
    : 3.0.13


   #+begin_src shell :dir /tmp :var release_version=exercism_cli_version
     curl -L https://github.com/exercism/cli/releases/download/v${release_version}/exercism-${release_version}-linux-x86_64.tar.gz | tar xz
   #+end_src

   #+begin_src shell :dir /sudo:: :var release_version=exercism_cli_version
     mv /tmp/exercism /opt/exercism-${release_version}
     ln -sf /opt/exercism-${release_version} /usr/local/bin/exercism
   #+end_src

   Now run ~exercism configure --token=<token> --workspace=~/exercism~, where ~<token>~ is available [[https://exercism.io/my/settings][here]].

** f3d - 3D visualizer

   #+NAME: f3d_version
   : 1.0.0

   #+begin_src sh :dir /tmp :var version=f3d_version
     curl -fsSL "https://gitlab.kitware.com/f3d/f3d/uploads/7f0f79cc2e6d4684bbf8f079d8ad84e9/f3d-${version}-Linux.tar.gz" | tar -xz
   #+end_src

   #+begin_src sh :dir /sudo:: :var version=f3d_version
     mv /tmp/f3d-"${version}"-Linux/ /opt/f3d-"${version}"
     ln -sf /opt/f3d-"${version}" /opt/f3d
     ln -sf /opt/f3d/bin/f3d /usr/local/bin/f3d
   #+end_src

** yq

   #+begin_src sh :dir /tmp
     curl -fsSL https://github.com/mikefarah/yq/releases/download/3.3.2/yq_linux_amd64 > yq
   #+end_src

   #+begin_src sh :dir /sudo::
     mv /tmp/yq /usr/local/bin/yq
     chown root:root /usr/local/bin/yq
     chmod 0755 /usr/local/bin/yq
   #+end_src

* Robotics

** Arduino

   The package in ubuntu's repo is *drum rolls* really outdated, so let's build from the repo, again.

   #+NAME: arduino_cli_version
   : 0.11.0

   Also I won't be using the IDE since I'll stick with emacs, so let's install just the CLI

   #+begin_src sh :dir /tmp :var version=arduino_cli_version
     curl -fsSL "https://github.com/arduino/arduino-cli/releases/download/${version}/arduino-cli_${version}_Linux_64bit.tar.gz" | tar -xz
   #+end_src

   #+begin_src sh :dir /sudo:: :var version=arduino_cli_version
     mv /tmp/arduino-cli /usr/local/bin/arduino-cli-${version}
     ln -sf /usr/local/bin/arduino-cli-${version} /usr/local/bin/arduino-cli
     chown root:root /usr/local/bin/arduino-cli-${version}
     chmod 0755 /usr/local/bin/arduino-cli-${version}
     chmod 0755 /usr/local/bin/arduino-cli
   #+end_src

   Now init config and update cache index:

   #+begin_src sh
     arduino-cli config init
     arduino-cli core update-index
   #+end_src

** Zumo 32U4

   First add the additional board manager URL to arduino cli's config. If yq is installed, just run:

   #+begin_src sh
     yq w --inplace ~/.arduino15/arduino-cli.yaml 'board_manager.additional_urls[+]' 'https://files.pololu.com/arduino/package_pololu_index.json'
   #+end_src

   Install A-Star core and Zumo library:

   #+begin_src sh
     arduino-cli core update-index
     arduino-cli core install arduino:avr
     arduino-cli core install pololu-a-star:avr
     arduino-cli lib install Zumo32U4
   #+end_src

** platformio

   Install the cli:

   #+begin_src sh :dir /tmp
   curl -fsSL https://raw.githubusercontent.com/platformio/platformio-core-installer/master/get-platformio.py -o get-platformio.py
   python3 get-platformio.py
   #+end_src

   And add the config to dotfiles:

   #+begin_src shell :tangle ~/.zsh.d/apps.d/10-platformio.sh :mkdirp true
   #!/usr/bin/env bash
   PATH=${PATH}:~/.platformio/penv/bin
   #+end_src

** Processing IDE

   #+begin_src shell :dir /tmp
   curl -fsSL https://download.processing.org/processing-3.5.4-linux64.tgz | tar -xz
   #+end_src

   #+begin_src shell :dir /sudo::
   mv /tmp/processing-3.5.4 /opt
   ln -sf /opt/processing-3.5.4 /opt/processing
   ln -sf /opt/processing/processing /usr/local/bin/processing-ide
   #+end_src
